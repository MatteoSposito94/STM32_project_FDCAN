
H7_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08005414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000024c  24000074  08005488  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240002c0  08005488  000202c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000150d7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002256  00000000  00000000  00035179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a88  00000000  00000000  000373d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009c0  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035ef7  00000000  00000000  00038818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b8d5  00000000  00000000  0006e70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159ff3  00000000  00000000  00079fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d3fd7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f4c  00000000  00000000  001d402c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800533c 	.word	0x0800533c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800533c 	.word	0x0800533c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_FDCAN_RxFifo0Callback>:


		// RX PART FDCAN1 Callback

		void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
		{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
		  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d014      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
		  {
			/* Retreive Rx messages from RX FIFO0 */
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f001 fa80 	bl	80018a0 <HAL_FDCAN_GetRxMessage>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <HAL_FDCAN_RxFifo0Callback+0x2a>
			{
			/* Reception Error */
			Error_Handler();
 80003a6:	f000 fbab 	bl	8000b00 <Error_Handler>
			}
			if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003aa:	2200      	movs	r2, #0
 80003ac:	2101      	movs	r1, #1
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f001 fbe4 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_FDCAN_RxFifo0Callback+0x3e>
			{
			  /* Notification Error */
			  Error_Handler();
 80003ba:	f000 fba1 	bl	8000b00 <Error_Handler>
			}
		  }
		}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	24000200 	.word	0x24000200
 80003cc:	240000d4 	.word	0x240000d4

080003d0 <HAL_FDCAN_RxFifo1Callback>:

		// RX PART FDCAN2 Callback

		void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
		{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
		  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f003 0310 	and.w	r3, r3, #16
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d028      	beq.n	8000436 <HAL_FDCAN_RxFifo1Callback+0x66>
		  {
			/* Retreive Rx messages from RX FIFO1 */
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <HAL_FDCAN_RxFifo1Callback+0x70>)
 80003e6:	4a17      	ldr	r2, [pc, #92]	; (8000444 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80003e8:	2141      	movs	r1, #65	; 0x41
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f001 fa58 	bl	80018a0 <HAL_FDCAN_GetRxMessage>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <HAL_FDCAN_RxFifo1Callback+0x2a>
			{
			/* Reception Error */
			Error_Handler();
 80003f6:	f000 fb83 	bl	8000b00 <Error_Handler>
			}
			if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2110      	movs	r1, #16
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f001 fbbc 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <HAL_FDCAN_RxFifo1Callback+0x3e>
			{
			  /* Notification Error */
			  Error_Handler();
 800040a:	f000 fb79 	bl	8000b00 <Error_Handler>
			}

			   sprintf ((char*)TxData2, "FDCAN2TX %d", indx++);
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	490c      	ldr	r1, [pc, #48]	; (8000448 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000416:	600a      	str	r2, [r1, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	490c      	ldr	r1, [pc, #48]	; (800044c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <HAL_FDCAN_RxFifo1Callback+0x80>)
 800041e:	f004 fb6d 	bl	8004afc <siprintf>

			   if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2)!= HAL_OK)
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000424:	490b      	ldr	r1, [pc, #44]	; (8000454 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000426:	480c      	ldr	r0, [pc, #48]	; (8000458 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000428:	f001 f9df 	bl	80017ea <HAL_FDCAN_AddMessageToTxFifoQ>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <HAL_FDCAN_RxFifo1Callback+0x66>
			   {
			    Error_Handler();
 8000432:	f000 fb65 	bl	8000b00 <Error_Handler>
			   }
		  }
		}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	240000c8 	.word	0x240000c8
 8000444:	2400012c 	.word	0x2400012c
 8000448:	24000090 	.word	0x24000090
 800044c:	08005354 	.word	0x08005354
 8000450:	240001f4 	.word	0x240001f4
 8000454:	240000a4 	.word	0x240000a4
 8000458:	24000154 	.word	0x24000154

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 fd6e 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f88c 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 fa08 	bl	800087c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800046c:	f000 f906 	bl	800067c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000470:	f000 f984 	bl	800077c <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

		// Start FDCAN1
		  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000474:	483b      	ldr	r0, [pc, #236]	; (8000564 <main+0x108>)
 8000476:	f001 f98d 	bl	8001794 <HAL_FDCAN_Start>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <main+0x28>
		  {
			  Error_Handler();
 8000480:	f000 fb3e 	bl	8000b00 <Error_Handler>
		  }

		  // Start FDCAN2
		  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8000484:	4838      	ldr	r0, [pc, #224]	; (8000568 <main+0x10c>)
 8000486:	f001 f985 	bl	8001794 <HAL_FDCAN_Start>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <main+0x38>
		  {
			  Error_Handler();
 8000490:	f000 fb36 	bl	8000b00 <Error_Handler>
		  }

		  // Activate notification for new data in FIFO0 for FDCAN1
		  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000494:	2200      	movs	r2, #0
 8000496:	2101      	movs	r1, #1
 8000498:	4832      	ldr	r0, [pc, #200]	; (8000564 <main+0x108>)
 800049a:	f001 fb6f 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <main+0x4c>
		  {
			/* Notification Error */
			Error_Handler();
 80004a4:	f000 fb2c 	bl	8000b00 <Error_Handler>
		  }

		  // Activate notification for new data in FIFO1 for FDCAN2
		  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80004a8:	2200      	movs	r2, #0
 80004aa:	2110      	movs	r1, #16
 80004ac:	482e      	ldr	r0, [pc, #184]	; (8000568 <main+0x10c>)
 80004ae:	f001 fb65 	bl	8001b7c <HAL_FDCAN_ActivateNotification>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <main+0x60>
		  {
			/* Notification Error */
			Error_Handler();
 80004b8:	f000 fb22 	bl	8000b00 <Error_Handler>
		  }


	// Configure TX header fon FDCAN1
	  TxHeader1.Identifier = 0x11;
 80004bc:	4b2b      	ldr	r3, [pc, #172]	; (800056c <main+0x110>)
 80004be:	2211      	movs	r2, #17
 80004c0:	601a      	str	r2, [r3, #0]
	  TxHeader1.IdType = FDCAN_STANDARD_ID;
 80004c2:	4b2a      	ldr	r3, [pc, #168]	; (800056c <main+0x110>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
	  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80004c8:	4b28      	ldr	r3, [pc, #160]	; (800056c <main+0x110>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	  TxHeader1.DataLength = FDCAN_DLC_BYTES_12;
 80004ce:	4b27      	ldr	r3, [pc, #156]	; (800056c <main+0x110>)
 80004d0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80004d4:	60da      	str	r2, [r3, #12]
	  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <main+0x110>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 80004dc:	4b23      	ldr	r3, [pc, #140]	; (800056c <main+0x110>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
	  TxHeader1.FDFormat = FDCAN_FD_CAN;
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <main+0x110>)
 80004e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004e8:	619a      	str	r2, [r3, #24]
	  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <main+0x110>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
	  TxHeader1.MessageMarker = 0;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <main+0x110>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]

	  // Configure TX header fon FDCAN2
		TxHeader2.Identifier = 0x122;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <main+0x114>)
 80004f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80004fc:	601a      	str	r2, [r3, #0]
		TxHeader2.IdType = FDCAN_STANDARD_ID;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <main+0x114>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
		TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <main+0x114>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
		TxHeader2.DataLength = FDCAN_DLC_BYTES_12;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <main+0x114>)
 800050c:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000510:	60da      	str	r2, [r3, #12]
		TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <main+0x114>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
		TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <main+0x114>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
		TxHeader2.FDFormat = FDCAN_FD_CAN;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <main+0x114>)
 8000520:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000524:	619a      	str	r2, [r3, #24]
		TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <main+0x114>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
		TxHeader2.MessageMarker = 0;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0x114>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
    /* USER CODE BEGIN 3 */

	  while (1)
	  {

	   sprintf ((char*)TxData1, "FDCAN1TX %d", indx++);
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <main+0x118>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	490e      	ldr	r1, [pc, #56]	; (8000574 <main+0x118>)
 800053a:	600a      	str	r2, [r1, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	490e      	ldr	r1, [pc, #56]	; (8000578 <main+0x11c>)
 8000540:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0x120>)
 8000542:	f004 fadb 	bl	8004afc <siprintf>

	   if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK)
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x120>)
 8000548:	4908      	ldr	r1, [pc, #32]	; (800056c <main+0x110>)
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x108>)
 800054c:	f001 f94d 	bl	80017ea <HAL_FDCAN_AddMessageToTxFifoQ>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <main+0xfe>
	   {
	    Error_Handler();
 8000556:	f000 fad3 	bl	8000b00 <Error_Handler>
	   }

	   HAL_Delay (1000);
 800055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055e:	f000 fd81 	bl	8001064 <HAL_Delay>
	   sprintf ((char*)TxData1, "FDCAN1TX %d", indx++);
 8000562:	e7e6      	b.n	8000532 <main+0xd6>
 8000564:	24000154 	.word	0x24000154
 8000568:	2400020c 	.word	0x2400020c
 800056c:	240000fc 	.word	0x240000fc
 8000570:	240000a4 	.word	0x240000a4
 8000574:	24000090 	.word	0x24000090
 8000578:	08005360 	.word	0x08005360
 800057c:	24000120 	.word	0x24000120

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b09c      	sub	sp, #112	; 0x70
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	224c      	movs	r2, #76	; 0x4c
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 faac 	bl	8004aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2220      	movs	r2, #32
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 faa6 	bl	8004aec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005a0:	2002      	movs	r0, #2
 80005a2:	f002 fa31 	bl	8002a08 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <SystemClock_Config+0xf4>)
 80005ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ae:	4a31      	ldr	r2, [pc, #196]	; (8000674 <SystemClock_Config+0xf4>)
 80005b0:	f023 0301 	bic.w	r3, r3, #1
 80005b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <SystemClock_Config+0xf4>)
 80005b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <SystemClock_Config+0xf8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <SystemClock_Config+0xf8>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <SystemClock_Config+0xf8>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005dc:	bf00      	nop
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xf8>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ea:	d1f8      	bne.n	80005de <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000604:	2309      	movs	r3, #9
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800060c:	2303      	movs	r3, #3
 800060e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000614:	230c      	movs	r3, #12
 8000616:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000618:	2302      	movs	r3, #2
 800061a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800061c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa28 	bl	8002a7c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000632:	f000 fa65 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	233f      	movs	r3, #63	; 0x3f
 8000638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe3a 	bl	80032d4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000666:	f000 fa4b 	bl	8000b00 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3770      	adds	r7, #112	; 0x70
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	58000400 	.word	0x58000400
 8000678:	58024800 	.word	0x58024800

0800067c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000682:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000684:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <MX_FDCAN1_Init+0xfc>)
 8000686:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000688:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800068a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000690:	4b38      	ldr	r3, [pc, #224]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000698:	2201      	movs	r2, #1
 800069a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006a8:	4b32      	ldr	r3, [pc, #200]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006b0:	220d      	movs	r2, #13
 80006b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006b6:	2256      	movs	r2, #86	; 0x56
 80006b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006bc:	220d      	movs	r2, #13
 80006be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006c2:	2219      	movs	r2, #25
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006f2:	2205      	movs	r2, #5
 80006f4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 80006fe:	2204      	movs	r2, #4
 8000700:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000704:	2200      	movs	r2, #0
 8000706:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800070a:	2204      	movs	r2, #4
 800070c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000710:	2200      	movs	r2, #0
 8000712:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000716:	2200      	movs	r2, #0
 8000718:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800071c:	2201      	movs	r2, #1
 800071e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000722:	2200      	movs	r2, #0
 8000724:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 8000728:	2205      	movs	r2, #5
 800072a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800072e:	f000 fdd9 	bl	80012e4 <HAL_FDCAN_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 8000738:	f000 f9e2 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000748:	2301      	movs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 800074c:	2311      	movs	r3, #17
 800074e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x22;
 8000750:	2322      	movs	r3, #34	; 0x22
 8000752:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_FDCAN1_Init+0xf8>)
 800075e:	f000 ffa3 	bl	80016a8 <HAL_FDCAN_ConfigFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_FDCAN1_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000768:	f000 f9ca 	bl	8000b00 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000154 	.word	0x24000154
 8000778:	4000a000 	.word	0x4000a000

0800077c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000784:	4a3c      	ldr	r2, [pc, #240]	; (8000878 <MX_FDCAN2_Init+0xfc>)
 8000786:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000788:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800078a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000798:	2201      	movs	r2, #1
 800079a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800079c:	4b35      	ldr	r3, [pc, #212]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007b0:	220d      	movs	r2, #13
 80007b2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007b6:	2256      	movs	r2, #86	; 0x56
 80007b8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007bc:	220d      	movs	r2, #13
 80007be:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007c2:	2219      	movs	r2, #25
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 11;
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007da:	220b      	movs	r2, #11
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 80007fe:	2205      	movs	r2, #5
 8000800:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000804:	2200      	movs	r2, #0
 8000806:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800080a:	2204      	movs	r2, #4
 800080c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000810:	2200      	movs	r2, #0
 8000812:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000816:	2200      	movs	r2, #0
 8000818:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800081c:	2200      	movs	r2, #0
 800081e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 8000828:	2204      	movs	r2, #4
 800082a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800082e:	f000 fd59 	bl	80012e4 <HAL_FDCAN_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_FDCAN2_Init+0xc0>
  {
    Error_Handler();
 8000838:	f000 f962 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000844:	2302      	movs	r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000848:	2302      	movs	r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 800084c:	2311      	movs	r3, #17
 800084e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x22;
 8000850:	2322      	movs	r3, #34	; 0x22
 8000852:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_FDCAN2_Init+0xf8>)
 800085e:	f000 ff23 	bl	80016a8 <HAL_FDCAN_ConfigFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_FDCAN2_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000868:	f000 f94a 	bl	8000b00 <Error_Handler>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2400020c 	.word	0x2400020c
 8000878:	4000a400 	.word	0x4000a400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b94      	ldr	r3, [pc, #592]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a92      	ldr	r2, [pc, #584]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b90      	ldr	r3, [pc, #576]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b0:	4b8c      	ldr	r3, [pc, #560]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	4a8b      	ldr	r2, [pc, #556]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c0:	4b88      	ldr	r3, [pc, #544]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b85      	ldr	r3, [pc, #532]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	4a83      	ldr	r2, [pc, #524]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008de:	4b81      	ldr	r3, [pc, #516]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b7d      	ldr	r3, [pc, #500]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a7c      	ldr	r2, [pc, #496]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <MX_GPIO_Init+0x268>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b76      	ldr	r3, [pc, #472]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_GPIO_Init+0x268>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b63      	ldr	r3, [pc, #396]	; (8000ae4 <MX_GPIO_Init+0x268>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f244 0101 	movw	r1, #16385	; 0x4001
 800096a:	485f      	ldr	r0, [pc, #380]	; (8000ae8 <MX_GPIO_Init+0x26c>)
 800096c:	f002 f832 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000976:	485d      	ldr	r0, [pc, #372]	; (8000aec <MX_GPIO_Init+0x270>)
 8000978:	f002 f82c 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	485b      	ldr	r0, [pc, #364]	; (8000af0 <MX_GPIO_Init+0x274>)
 8000982:	f002 f827 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4856      	ldr	r0, [pc, #344]	; (8000af4 <MX_GPIO_Init+0x278>)
 800099c:	f001 fe6a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009a0:	2332      	movs	r3, #50	; 0x32
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b0:	230b      	movs	r3, #11
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	484e      	ldr	r0, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x278>)
 80009bc:	f001 fe5a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009c0:	2386      	movs	r3, #134	; 0x86
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d0:	230b      	movs	r3, #11
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4847      	ldr	r0, [pc, #284]	; (8000af8 <MX_GPIO_Init+0x27c>)
 80009dc:	f001 fe4a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009e0:	f244 0301 	movw	r3, #16385	; 0x4001
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	483b      	ldr	r0, [pc, #236]	; (8000ae8 <MX_GPIO_Init+0x26c>)
 80009fa:	f001 fe3b 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a10:	230b      	movs	r3, #11
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4833      	ldr	r0, [pc, #204]	; (8000ae8 <MX_GPIO_Init+0x26c>)
 8000a1c:	f001 fe2a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a32:	2307      	movs	r3, #7
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482b      	ldr	r0, [pc, #172]	; (8000aec <MX_GPIO_Init+0x270>)
 8000a3e:	f001 fe19 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <MX_GPIO_Init+0x270>)
 8000a5c:	f001 fe0a 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_GPIO_Init+0x280>)
 8000a76:	f001 fdfd 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a7a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_GPIO_Init+0x27c>)
 8000a98:	f001 fdec 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <MX_GPIO_Init+0x280>)
 8000aba:	f001 fddb 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x274>)
 8000ad6:	f001 fdcd 	bl	8002674 <HAL_GPIO_Init>

}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020400 	.word	0x58020400
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	58021000 	.word	0x58021000
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020000 	.word	0x58020000
 8000afc:	58021800 	.word	0x58021800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ba      	sub	sp, #232	; 0xe8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	22bc      	movs	r2, #188	; 0xbc
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 ffc3 	bl	8004aec <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a5c      	ldr	r2, [pc, #368]	; (8000cdc <HAL_FDCAN_MspInit+0x19c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d155      	bne.n	8000c1c <HAL_FDCAN_MspInit+0xdc>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fed6 	bl	8003934 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000b8e:	f7ff ffb7 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b92:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	4a51      	ldr	r2, [pc, #324]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000b9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b9c:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10e      	bne.n	8000bc2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ba4:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000ba6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000baa:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000bb4:	4b4b      	ldr	r3, [pc, #300]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000bb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000be0:	2303      	movs	r3, #3
 8000be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bf8:	2309      	movs	r3, #9
 8000bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <HAL_FDCAN_MspInit+0x1a8>)
 8000c06:	f001 fd35 	bl	8002674 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2013      	movs	r0, #19
 8000c10:	f000 fb33 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c14:	2013      	movs	r0, #19
 8000c16:	f000 fb4a 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000c1a:	e05a      	b.n	8000cd2 <HAL_FDCAN_MspInit+0x192>
  else if(hfdcan->Instance==FDCAN2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a32      	ldr	r2, [pc, #200]	; (8000cec <HAL_FDCAN_MspInit+0x1ac>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d155      	bne.n	8000cd2 <HAL_FDCAN_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fe7b 	bl	8003934 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_FDCAN_MspInit+0x108>
      Error_Handler();
 8000c44:	f7ff ff5c 	bl	8000b00 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000c50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_FDCAN_MspInit+0x1a0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10e      	bne.n	8000c78 <HAL_FDCAN_MspInit+0x138>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c60:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_FDCAN_MspInit+0x1a4>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000c96:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_FDCAN_MspInit+0x1b0>)
 8000cbe:	f001 fcd9 	bl	8002674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f000 fad7 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000ccc:	2014      	movs	r0, #20
 8000cce:	f000 faee 	bl	80012ae <HAL_NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	37e8      	adds	r7, #232	; 0xe8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	4000a000 	.word	0x4000a000
 8000ce0:	24000094 	.word	0x24000094
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58020c00 	.word	0x58020c00
 8000cec:	4000a400 	.word	0x4000a400
 8000cf0:	58020400 	.word	0x58020400

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f970 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <FDCAN1_IT0_IRQHandler+0x10>)
 8000d4e:	f000 ff8f 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24000154 	.word	0x24000154

08000d5c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <FDCAN2_IT0_IRQHandler+0x10>)
 8000d62:	f000 ff85 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400020c 	.word	0x2400020c

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f003 fe6c 	bl	8004a7c <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24080000 	.word	0x24080000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	24000098 	.word	0x24000098
 8000dd8:	240002c0 	.word	0x240002c0

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <SystemInit+0xe4>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <SystemInit+0xe4>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <SystemInit+0xe8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	2b06      	cmp	r3, #6
 8000dfa:	d807      	bhi.n	8000e0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <SystemInit+0xe8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 030f 	bic.w	r3, r3, #15
 8000e04:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <SystemInit+0xe8>)
 8000e06:	f043 0307 	orr.w	r3, r3, #7
 8000e0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <SystemInit+0xec>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <SystemInit+0xec>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <SystemInit+0xec>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <SystemInit+0xec>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4929      	ldr	r1, [pc, #164]	; (8000ec8 <SystemInit+0xec>)
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <SystemInit+0xf0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <SystemInit+0xe8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <SystemInit+0xe8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 030f 	bic.w	r3, r3, #15
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <SystemInit+0xe8>)
 8000e40:	f043 0307 	orr.w	r3, r3, #7
 8000e44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <SystemInit+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SystemInit+0xec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <SystemInit+0xec>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <SystemInit+0xec>)
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <SystemInit+0xf4>)
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <SystemInit+0xec>)
 8000e60:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <SystemInit+0xf8>)
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <SystemInit+0xec>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <SystemInit+0xfc>)
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <SystemInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <SystemInit+0xec>)
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <SystemInit+0xfc>)
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <SystemInit+0xec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <SystemInit+0xec>)
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <SystemInit+0xfc>)
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <SystemInit+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <SystemInit+0xec>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <SystemInit+0xec>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <SystemInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <SystemInit+0x100>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <SystemInit+0x104>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ea6:	d202      	bcs.n	8000eae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <SystemInit+0x108>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <SystemInit+0x10c>)
 8000eb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000eb4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	52002000 	.word	0x52002000
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ed0:	02020200 	.word	0x02020200
 8000ed4:	01ff0000 	.word	0x01ff0000
 8000ed8:	01010280 	.word	0x01010280
 8000edc:	5c001000 	.word	0x5c001000
 8000ee0:	ffff0000 	.word	0xffff0000
 8000ee4:	51008108 	.word	0x51008108
 8000ee8:	52004000 	.word	0x52004000

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f7ff ff74 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f003 fdb5 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fa9d 	bl	800045c <main>
  bx  lr
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f2c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f30:	08005414 	.word	0x08005414
  ldr r2, =_sbss
 8000f34:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f38:	240002c0 	.word	0x240002c0

08000f3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC3_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f98c 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f4c:	f002 fb78 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	4913      	ldr	r1, [pc, #76]	; (8000fac <HAL_Init+0x6c>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_Init+0x6c>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x70>)
 8000f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_Init+0x74>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f814 	bl	8000fb8 <HAL_InitTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e002      	b.n	8000fa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fdb7 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	080053b8 	.word	0x080053b8
 8000fb0:	24000004 	.word	0x24000004
 8000fb4:	24000000 	.word	0x24000000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_InitTick+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e021      	b.n	8001010 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x64>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f971 	bl	80012ca <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f93b 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x68>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2400000c 	.word	0x2400000c
 800101c:	24000000 	.word	0x24000000
 8001020:	24000008 	.word	0x24000008

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2400000c 	.word	0x2400000c
 8001048:	240002ac 	.word	0x240002ac

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	240002ac 	.word	0x240002ac

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400000c 	.word	0x2400000c

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	5c001000 	.word	0x5c001000

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff40 	bl	800110c <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff33 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa4 	bl	8001220 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	; 0x60
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80012ec:	4a84      	ldr	r2, [pc, #528]	; (8001500 <HAL_FDCAN_Init+0x21c>)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4611      	mov	r1, r2
 80012f4:	224c      	movs	r2, #76	; 0x4c
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fbea 	bl	8004ad0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1ca      	b.n	800169c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a7e      	ldr	r2, [pc, #504]	; (8001504 <HAL_FDCAN_Init+0x220>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d106      	bne.n	800131e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d106      	bne.n	8001338 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fc04 	bl	8000b40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0210 	bic.w	r2, r2, #16
 8001346:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001348:	f7ff fe80 	bl	800104c <HAL_GetTick>
 800134c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800134e:	e014      	b.n	800137a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001350:	f7ff fe7c 	bl	800104c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b0a      	cmp	r3, #10
 800135c:	d90d      	bls.n	800137a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e190      	b.n	800169c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b08      	cmp	r3, #8
 8001386:	d0e3      	beq.n	8001350 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001398:	f7ff fe58 	bl	800104c <HAL_GetTick>
 800139c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800139e:	e014      	b.n	80013ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013a0:	f7ff fe54 	bl	800104c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b0a      	cmp	r3, #10
 80013ac:	d90d      	bls.n	80013ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e168      	b.n	800169c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0e3      	beq.n	80013a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0202 	orr.w	r2, r2, #2
 80013e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7c1b      	ldrb	r3, [r3, #16]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fe:	619a      	str	r2, [r3, #24]
 8001400:	e007      	b.n	8001412 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001410:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7c5b      	ldrb	r3, [r3, #17]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	e007      	b.n	800143c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800143a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c9b      	ldrb	r3, [r3, #18]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e007      	b.n	8001466 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001464:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800148a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0210 	bic.w	r2, r2, #16
 800149a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0204 	orr.w	r2, r2, #4
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	e030      	b.n	8001518 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d02c      	beq.n	8001518 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d020      	beq.n	8001508 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0210 	orr.w	r2, r2, #16
 80014e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d114      	bne.n	8001518 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	e00b      	b.n	8001518 <HAL_FDCAN_Init+0x234>
 8001500:	0800536c 	.word	0x0800536c
 8001504:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	3b01      	subs	r3, #1
 800151e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	3b01      	subs	r3, #1
 8001526:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001528:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001530:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	3b01      	subs	r3, #1
 800153a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001540:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001542:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800154c:	d115      	bne.n	800157a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3b01      	subs	r3, #1
 800155a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800155c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	3b01      	subs	r3, #1
 8001564:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001566:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	3b01      	subs	r3, #1
 8001570:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001576:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001578:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	4413      	add	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d012      	beq.n	80015cc <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015ae:	f023 0107 	bic.w	r1, r3, #7
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015bc:	4413      	add	r3, r2
 80015be:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80015dc:	f023 0107 	bic.w	r1, r3, #7
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015ea:	4413      	add	r3, r2
 80015ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d013      	beq.n	800162a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800160a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001618:	4413      	add	r3, r2
 800161a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800161e:	011a      	lsls	r2, r3, #4
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	2b00      	cmp	r3, #0
 8001630:	d013      	beq.n	800165a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800163a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001648:	4413      	add	r3, r2
 800164a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800164e:	021a      	lsls	r2, r3, #8
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_FDCAN_Init+0x3c0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d107      	bne.n	8001674 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f022 0203 	bic.w	r2, r2, #3
 8001672:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fded 	bl	800226c <FDCAN_CalcultateRamBlockAddresses>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001698:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800169c:	4618      	mov	r0, r3
 800169e:	3760      	adds	r7, #96	; 0x60
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	4000a000 	.word	0x4000a000

080016a8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016b8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d002      	beq.n	80016c6 <HAL_FDCAN_ConfigFilter+0x1e>
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d157      	bne.n	8001776 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d12b      	bne.n	8001726 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d10d      	bne.n	80016f2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80016e2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80016e8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80016ea:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00e      	b.n	8001710 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016fe:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001706:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e025      	b.n	8001772 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	075a      	lsls	r2, r3, #29
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b07      	cmp	r3, #7
 800173a:	d103      	bne.n	8001744 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e006      	b.n	8001752 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	079a      	lsls	r2, r3, #30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3304      	adds	r3, #4
 800176a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e008      	b.n	8001788 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d111      	bne.n	80017cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e008      	b.n	80017de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017d2:	f043 0204 	orr.w	r2, r3, #4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d141      	bne.n	8001886 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800180a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e038      	b.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800183c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e026      	b.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fe89 	bl	8002578 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2101      	movs	r1, #1
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e008      	b.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800188c:	f043 0208 	orr.w	r2, r3, #8
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80018ba:	7efb      	ldrb	r3, [r7, #27]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	f040 814b 	bne.w	8001b58 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	d14d      	bne.n	8001964 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e13e      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e12c      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001918:	0e1b      	lsrs	r3, r3, #24
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10b      	bne.n	800193a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800192a:	0fdb      	lsrs	r3, r3, #31
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001934:	d101      	bne.n	800193a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001936:	2301      	movs	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	69f9      	ldr	r1, [r7, #28]
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	e069      	b.n	8001a38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b41      	cmp	r3, #65	; 0x41
 8001968:	d14d      	bne.n	8001a06 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001972:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0ed      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0db      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80019ba:	0e1b      	lsrs	r3, r3, #24
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10b      	bne.n	80019dc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019cc:	0fdb      	lsrs	r3, r3, #31
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d6:	d101      	bne.n	80019dc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80019d8:	2301      	movs	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	69f9      	ldr	r1, [r7, #28]
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e018      	b.n	8001a38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d309      	bcc.n	8001a24 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0a2      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e005      	b.n	8001a68 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	3304      	adds	r3, #4
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e1b      	lsrs	r3, r3, #24
 8001aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0fda      	lsrs	r2, r3, #31
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3304      	adds	r3, #4
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	e00a      	b.n	8001af2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	441a      	add	r2, r3
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	440b      	add	r3, r1
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3301      	adds	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	0c1b      	lsrs	r3, r3, #16
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d3eb      	bcc.n	8001adc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d105      	bne.n	8001b16 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001b14:	e01e      	b.n	8001b54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b41      	cmp	r3, #65	; 0x41
 8001b1a:	d105      	bne.n	8001b28 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001b26:	e015      	b.n	8001b54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b1f      	cmp	r3, #31
 8001b2c:	d808      	bhi.n	8001b40 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001b3e:	e009      	b.n	8001b54 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 021f 	and.w	r2, r3, #31
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e008      	b.n	8001b6a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b5e:	f043 0208 	orr.w	r2, r3, #8
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	372c      	adds	r7, #44	; 0x2c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	080053c8 	.word	0x080053c8

08001b7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d002      	beq.n	8001b9c <HAL_FDCAN_ActivateNotification+0x20>
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d155      	bne.n	8001c48 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bba:	e014      	b.n	8001be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d108      	bne.n	8001bde <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0202 	orr.w	r2, r2, #2
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bdc:	e003      	b.n	8001be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2203      	movs	r2, #3
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_FDCAN_ActivateNotification+0xec>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6553      	str	r3, [r2, #84]	; 0x54
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0f9b      	lsrs	r3, r3, #30
 8001c3e:	490b      	ldr	r1, [pc, #44]	; (8001c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e008      	b.n	8001c5a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	3fcfffff 	.word	0x3fcfffff
 8001c6c:	4000a800 	.word	0x4000a800

08001c70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b092      	sub	sp, #72	; 0x48
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	079b      	lsls	r3, r3, #30
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001c80:	4b8e      	ldr	r3, [pc, #568]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	079b      	lsls	r3, r3, #30
 8001c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c88:	4013      	ands	r3, r2
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb8:	4013      	ands	r3, r2
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ce8:	4013      	ands	r3, r2
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d00:	4013      	ands	r3, r2
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d011      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d28:	651a      	str	r2, [r3, #80]	; 0x50
 8001d2a:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa4f 	bl	80021d4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01e      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d017      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d66:	4013      	ands	r3, r2
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d72:	651a      	str	r2, [r3, #80]	; 0x50
 8001d74:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fa00 	bl	8002182 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_FDCAN_IRQHandler+0x250>)
 8001d90:	400b      	ands	r3, r1
 8001d92:	6513      	str	r3, [r2, #80]	; 0x50
 8001d94:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d98:	0f9b      	lsrs	r3, r3, #30
 8001d9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001d9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f9c4 	bl	800212c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <HAL_FDCAN_IRQHandler+0x250>)
 8001db2:	400b      	ands	r3, r1
 8001db4:	6513      	str	r3, [r2, #80]	; 0x50
 8001db6:	4a41      	ldr	r2, [pc, #260]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dba:	0f9b      	lsrs	r3, r3, #30
 8001dbc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f9be 	bl	8002142 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_FDCAN_IRQHandler+0x250>)
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	6513      	str	r3, [r2, #80]	; 0x50
 8001dd8:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ddc:	0f9b      	lsrs	r3, r3, #30
 8001dde:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe facc 	bl	8000380 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_FDCAN_IRQHandler+0x250>)
 8001df6:	400b      	ands	r3, r1
 8001df8:	6513      	str	r3, [r2, #80]	; 0x50
 8001dfa:	4a30      	ldr	r2, [pc, #192]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfe:	0f9b      	lsrs	r3, r3, #30
 8001e00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fae3 	bl	80003d0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d011      	beq.n	8001e3c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f98e 	bl	8002158 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01e      	beq.n	8001e88 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d017      	beq.n	8001e88 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f972 	bl	800216c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00f      	beq.n	8001ec4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eac:	651a      	str	r2, [r3, #80]	; 0x50
 8001eae:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_FDCAN_IRQHandler+0x24c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f96f 	bl	8002198 <HAL_FDCAN_RxBufferNewMessageCallback>
 8001eba:	e003      	b.n	8001ec4 <HAL_FDCAN_IRQHandler+0x254>
 8001ebc:	4000a800 	.word	0x4000a800
 8001ec0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d011      	beq.n	8001ef6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eea:	4b8d      	ldr	r3, [pc, #564]	; (8002120 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f95b 	bl	80021ac <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d011      	beq.n	8001f28 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f1c:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f94c 	bl	80021c0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00f      	beq.n	8001f64 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4e:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f70:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001f72:	400b      	ands	r3, r1
 8001f74:	6513      	str	r3, [r2, #80]	; 0x50
 8001f76:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	0f9b      	lsrs	r3, r3, #30
 8001f7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f93b 	bl	80021fc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d011      	beq.n	8001fb0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001f94:	400b      	ands	r3, r1
 8001f96:	6513      	str	r3, [r2, #80]	; 0x50
 8001f98:	4a61      	ldr	r2, [pc, #388]	; (8002120 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9c:	0f9b      	lsrs	r3, r3, #30
 8001f9e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 80a6 	bne.w	8002108 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 809e 	beq.w	8002108 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001fee:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002006:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4013      	ands	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800201e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002036:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8dc 	bl	8002212 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	6a3a      	ldr	r2, [r7, #32]
 8002066:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8dc 	bl	8002228 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01b      	beq.n	80020b6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	0c1b      	lsrs	r3, r3, #16
 8002094:	b29b      	uxth	r3, r3
 8002096:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f8c4 	bl	800223e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80020c4:	69f9      	ldr	r1, [r7, #28]
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8c5 	bl	8002256 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f868 	bl	80021e8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002118:	bf00      	nop
 800211a:	3748      	adds	r7, #72	; 0x48
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	4000a800 	.word	0x4000a800
 8002124:	3fcfffff 	.word	0x3fcfffff
 8002128:	4000a000 	.word	0x4000a000

0800212c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002282:	4ba7      	ldr	r3, [pc, #668]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002284:	4013      	ands	r3, r2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	0091      	lsls	r1, r2, #2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	430b      	orrs	r3, r1
 8002290:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022c2:	4b97      	ldr	r3, [pc, #604]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	0091      	lsls	r1, r2, #2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	430b      	orrs	r3, r1
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002304:	4b86      	ldr	r3, [pc, #536]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002306:	4013      	ands	r3, r2
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	0091      	lsls	r1, r2, #2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800231e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	041a      	lsls	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4413      	add	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800234c:	4b74      	ldr	r3, [pc, #464]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	0091      	lsls	r1, r2, #2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002366:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	0091      	lsls	r1, r2, #2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	0091      	lsls	r1, r2, #2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023da:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	041a      	lsls	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002404:	4013      	ands	r3, r2
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	0091      	lsls	r1, r2, #2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	430b      	orrs	r3, r1
 8002410:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800241c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002438:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002452:	4413      	add	r3, r2
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	441a      	add	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	441a      	add	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	441a      	add	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d915      	bls.n	8002548 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800251c:	e006      	b.n	800252c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800251e:	bf00      	nop
 8002520:	ffff0003 	.word	0xffff0003
 8002524:	10002b00 	.word	0x10002b00
 8002528:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e010      	b.n	800256a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e005      	b.n	800255c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3304      	adds	r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3f3      	bcc.n	8002550 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002596:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800259e:	4313      	orrs	r3, r2
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e00a      	b.n	80025ba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80025ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80025b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025c4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80025ca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80025d0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3304      	adds	r3, #4
 80025fa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3304      	adds	r3, #4
 8002606:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e020      	b.n	8002650 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3303      	adds	r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3302      	adds	r3, #2
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	440b      	add	r3, r1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002626:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	440b      	add	r3, r1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002634:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	440a      	add	r2, r1
 800263c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800263e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3304      	adds	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3304      	adds	r3, #4
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	4a06      	ldr	r2, [pc, #24]	; (8002670 <FDCAN_CopyMessageToRAM+0xf8>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	461a      	mov	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4293      	cmp	r3, r2
 8002660:	d3d5      	bcc.n	800260e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3724      	adds	r7, #36	; 0x24
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	080053c8 	.word	0x080053c8

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_GPIO_Init+0x234>)
 8002684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002686:	e194      	b.n	80029b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 8186 	beq.w	80029ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d005      	beq.n	80026b8 <HAL_GPIO_Init+0x44>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d130      	bne.n	800271a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ee:	2201      	movs	r2, #1
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 0201 	and.w	r2, r3, #1
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b03      	cmp	r3, #3
 8002724:	d017      	beq.n	8002756 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d123      	bne.n	80027aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	08da      	lsrs	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3208      	adds	r2, #8
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80e0 	beq.w	80029ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027f2:	4a2e      	ldr	r2, [pc, #184]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_GPIO_Init+0x238>)
 80027fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_GPIO_Init+0x23c>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <HAL_GPIO_Init+0x240>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d052      	beq.n	80028dc <HAL_GPIO_Init+0x268>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_GPIO_Init+0x244>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_GPIO_Init+0x22e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_GPIO_Init+0x248>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d02b      	beq.n	800289e <HAL_GPIO_Init+0x22a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_GPIO_Init+0x24c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d025      	beq.n	800289a <HAL_GPIO_Init+0x226>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_GPIO_Init+0x250>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_GPIO_Init+0x254>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d019      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_GPIO_Init+0x258>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_GPIO_Init+0x25c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x216>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_GPIO_Init+0x260>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <HAL_GPIO_Init+0x264>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x20e>
 800287e:	2309      	movs	r3, #9
 8002880:	e02d      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002882:	230a      	movs	r3, #10
 8002884:	e02b      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002886:	2308      	movs	r3, #8
 8002888:	e029      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800288a:	2307      	movs	r3, #7
 800288c:	e027      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800288e:	2306      	movs	r3, #6
 8002890:	e025      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002892:	2305      	movs	r3, #5
 8002894:	e023      	b.n	80028de <HAL_GPIO_Init+0x26a>
 8002896:	2304      	movs	r3, #4
 8002898:	e021      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800289a:	2303      	movs	r3, #3
 800289c:	e01f      	b.n	80028de <HAL_GPIO_Init+0x26a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e01d      	b.n	80028de <HAL_GPIO_Init+0x26a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01b      	b.n	80028de <HAL_GPIO_Init+0x26a>
 80028a6:	bf00      	nop
 80028a8:	58000080 	.word	0x58000080
 80028ac:	58024400 	.word	0x58024400
 80028b0:	58000400 	.word	0x58000400
 80028b4:	58020000 	.word	0x58020000
 80028b8:	58020400 	.word	0x58020400
 80028bc:	58020800 	.word	0x58020800
 80028c0:	58020c00 	.word	0x58020c00
 80028c4:	58021000 	.word	0x58021000
 80028c8:	58021400 	.word	0x58021400
 80028cc:	58021800 	.word	0x58021800
 80028d0:	58021c00 	.word	0x58021c00
 80028d4:	58022000 	.word	0x58022000
 80028d8:	58022400 	.word	0x58022400
 80028dc:	2300      	movs	r3, #0
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ee:	4938      	ldr	r1, [pc, #224]	; (80029d0 <HAL_GPIO_Init+0x35c>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f ae63 	bne.w	8002688 <HAL_GPIO_Init+0x14>
  }
}
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
 80029c6:	3724      	adds	r7, #36	; 0x24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	58000400 	.word	0x58000400

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_PWREx_ConfigSupply+0x70>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00a      	beq.n	8002a32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_PWREx_ConfigSupply+0x70>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e01f      	b.n	8002a6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e01d      	b.n	8002a6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_PWREx_ConfigSupply+0x70>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	490f      	ldr	r1, [pc, #60]	; (8002a78 <HAL_PWREx_ConfigSupply+0x70>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a42:	f7fe fb03 	bl	800104c <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a48:	e009      	b.n	8002a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a4a:	f7fe faff 	bl	800104c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a58:	d901      	bls.n	8002a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e007      	b.n	8002a6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_PWREx_ConfigSupply+0x70>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	58024800 	.word	0x58024800

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f000 bc1c 	b.w	80032c8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8087 	beq.w	8002bac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9e:	4b9e      	ldr	r3, [pc, #632]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa8:	4b9b      	ldr	r3, [pc, #620]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d007      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x48>
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b18      	cmp	r3, #24
 8002ab8:	d110      	bne.n	8002adc <HAL_RCC_OscConfig+0x60>
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4b94      	ldr	r3, [pc, #592]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06c      	beq.n	8002baa <HAL_RCC_OscConfig+0x12e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d168      	bne.n	8002baa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e3f5      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_OscConfig+0x78>
 8002ae6:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a8b      	ldr	r2, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e02e      	b.n	8002b52 <HAL_RCC_OscConfig+0xd6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x9a>
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a85      	ldr	r2, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a82      	ldr	r2, [pc, #520]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e01d      	b.n	8002b52 <HAL_RCC_OscConfig+0xd6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0xbe>
 8002b20:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a79      	ldr	r2, [pc, #484]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e00b      	b.n	8002b52 <HAL_RCC_OscConfig+0xd6>
 8002b3a:	4b77      	ldr	r3, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a76      	ldr	r2, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b74      	ldr	r3, [pc, #464]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a73      	ldr	r2, [pc, #460]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d013      	beq.n	8002b82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fa77 	bl	800104c <HAL_GetTick>
 8002b5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b62:	f7fe fa73 	bl	800104c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e3a9      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0xe6>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fa63 	bl	800104c <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fa5f 	bl	800104c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e395      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10e>
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002baa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80ca 	beq.w	8002d4e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bc4:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_RCC_OscConfig+0x164>
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2b18      	cmp	r3, #24
 8002bd4:	d156      	bne.n	8002c84 <HAL_RCC_OscConfig+0x208>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d151      	bne.n	8002c84 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x17c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e367      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bf8:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0219 	bic.w	r2, r3, #25
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4944      	ldr	r1, [pc, #272]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0a:	f7fe fa1f 	bl	800104c <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fa1b 	bl	800104c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e351      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c24:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	f7fe fa3c 	bl	80010ac <HAL_GetREVID>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d817      	bhi.n	8002c6e <HAL_RCC_OscConfig+0x1f2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1dc>
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c4e:	4a32      	ldr	r2, [pc, #200]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c56:	e07a      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	031b      	lsls	r3, r3, #12
 8002c66:	492c      	ldr	r1, [pc, #176]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6c:	e06f      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	4926      	ldr	r1, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c82:	e064      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d047      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 0219 	bic.w	r2, r3, #25
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	491f      	ldr	r1, [pc, #124]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe f9d5 	bl	800104c <HAL_GetTick>
 8002ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe f9d1 	bl	800104c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e307      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	f7fe f9f2 	bl	80010ac <HAL_GetREVID>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d817      	bhi.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x270>
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	6053      	str	r3, [r2, #4]
 8002cea:	e030      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	4907      	ldr	r1, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
 8002d00:	e025      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4901      	ldr	r1, [pc, #4]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
 8002d16:	e01a      	b.n	8002d4e <HAL_RCC_OscConfig+0x2d2>
 8002d18:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1c:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9d      	ldr	r2, [pc, #628]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f990 	bl	800104c <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7fe f98c 	bl	800104c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e2c2      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d42:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80a9 	beq.w	8002eae <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d64:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d66:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d007      	beq.n	8002d82 <HAL_RCC_OscConfig+0x306>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b18      	cmp	r3, #24
 8002d76:	d13a      	bne.n	8002dee <HAL_RCC_OscConfig+0x372>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d135      	bne.n	8002dee <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d82:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x31e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e296      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d9a:	f7fe f987 	bl	80010ac <HAL_GetREVID>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d817      	bhi.n	8002dd8 <HAL_RCC_OscConfig+0x35c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d108      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x346>
 8002db0:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002db8:	4a77      	ldr	r2, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dbe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc0:	e075      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dc2:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	069b      	lsls	r3, r3, #26
 8002dd0:	4971      	ldr	r1, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd6:	e06a      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	496c      	ldr	r1, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dec:	e05f      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d042      	beq.n	8002e7c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002df6:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a67      	ldr	r2, [pc, #412]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe f923 	bl	800104c <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f91f 	bl	800104c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e255      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e1c:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e28:	f7fe f940 	bl	80010ac <HAL_GetREVID>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d817      	bhi.n	8002e66 <HAL_RCC_OscConfig+0x3ea>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCC_OscConfig+0x3d4>
 8002e3e:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e46:	4a54      	ldr	r2, [pc, #336]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e4c:	6053      	str	r3, [r2, #4]
 8002e4e:	e02e      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
 8002e50:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	494e      	ldr	r1, [pc, #312]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e023      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
 8002e66:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	4948      	ldr	r1, [pc, #288]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60cb      	str	r3, [r1, #12]
 8002e7a:	e018      	b.n	8002eae <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f8e0 	bl	800104c <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e90:	f7fe f8dc 	bl	800104c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e212      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d019      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe f8bd 	bl	800104c <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f8b9 	bl	800104c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1ef      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x45a>
 8002ef4:	e018      	b.n	8002f28 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe f8a3 	bl	800104c <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe f89f 	bl	800104c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1d5      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d039      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f48:	f7fe f880 	bl	800104c <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f50:	f7fe f87c 	bl	800104c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1b2      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4d4>
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_RCC_OscConfig+0x51c>)
 8002f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f866 	bl	800104c <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f84:	f7fe f862 	bl	800104c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d904      	bls.n	8002f9c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e198      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f9c:	4ba3      	ldr	r3, [pc, #652]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ed      	bne.n	8002f84 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8081 	beq.w	80030b8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fb6:	4b9e      	ldr	r3, [pc, #632]	; (8003230 <HAL_RCC_OscConfig+0x7b4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a9d      	ldr	r2, [pc, #628]	; (8003230 <HAL_RCC_OscConfig+0x7b4>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe f843 	bl	800104c <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe f83f 	bl	800104c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e175      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fdc:	4b94      	ldr	r3, [pc, #592]	; (8003230 <HAL_RCC_OscConfig+0x7b4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x582>
 8002ff0:	4b8e      	ldr	r3, [pc, #568]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a8d      	ldr	r2, [pc, #564]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x5de>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x5a4>
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a88      	ldr	r2, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b86      	ldr	r3, [pc, #536]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a85      	ldr	r2, [pc, #532]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x5de>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x5c6>
 8003028:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a7f      	ldr	r2, [pc, #508]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b7d      	ldr	r3, [pc, #500]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a7c      	ldr	r2, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x5de>
 8003042:	4b7a      	ldr	r3, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a79      	ldr	r2, [pc, #484]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a76      	ldr	r2, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fd fff3 	bl	800104c <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fd ffef 	bl	800104c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e123      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x5ee>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fd ffdd 	bl	800104c <HAL_GetTick>
 8003092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fd ffd9 	bl	800104c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e10d      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8102 	beq.w	80032c6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ca:	2b18      	cmp	r3, #24
 80030cc:	f000 80bd 	beq.w	800324a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 8095 	bne.w	8003204 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a53      	ldr	r2, [pc, #332]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd ffb1 	bl	800104c <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd ffad 	bl	800104c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0e3      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800310e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_RCC_OscConfig+0x7b8>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	430a      	orrs	r2, r1
 8003120:	4942      	ldr	r1, [pc, #264]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	628b      	str	r3, [r1, #40]	; 0x28
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	3b01      	subs	r3, #1
 800312c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	3b01      	subs	r3, #1
 8003136:	025b      	lsls	r3, r3, #9
 8003138:	b29b      	uxth	r3, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	3b01      	subs	r3, #1
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	3b01      	subs	r3, #1
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003156:	4935      	ldr	r1, [pc, #212]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	4a32      	ldr	r2, [pc, #200]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <HAL_RCC_OscConfig+0x7bc>)
 800316e:	4013      	ands	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003174:	00d2      	lsls	r2, r2, #3
 8003176:	492d      	ldr	r1, [pc, #180]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f023 020c 	bic.w	r2, r3, #12
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	4928      	ldr	r1, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f023 0202 	bic.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4924      	ldr	r1, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800319c:	4313      	orrs	r3, r2
 800319e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd ff36 	bl	800104c <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd ff32 	bl	800104c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e068      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x768>
 8003202:	e060      	b.n	80032c6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <HAL_RCC_OscConfig+0x7b0>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd ff1c 	bl	800104c <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003216:	e011      	b.n	800323c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7fd ff18 	bl	800104c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d90a      	bls.n	800323c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e04e      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
 800322a:	bf00      	nop
 800322c:	58024400 	.word	0x58024400
 8003230:	58024800 	.word	0x58024800
 8003234:	fffffc0c 	.word	0xfffffc0c
 8003238:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x854>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e7      	bne.n	8003218 <HAL_RCC_OscConfig+0x79c>
 8003248:	e03d      	b.n	80032c6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x854>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x854>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b01      	cmp	r3, #1
 800325c:	d031      	beq.n	80032c2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d12a      	bne.n	80032c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d122      	bne.n	80032c2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d11a      	bne.n	80032c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	0a5b      	lsrs	r3, r3, #9
 8003290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003298:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d111      	bne.n	80032c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d108      	bne.n	80032c2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0e1b      	lsrs	r3, r3, #24
 80032b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3730      	adds	r7, #48	; 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	58024400 	.word	0x58024400

080032d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e19c      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b8a      	ldr	r3, [pc, #552]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d910      	bls.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b87      	ldr	r3, [pc, #540]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	4985      	ldr	r1, [pc, #532]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b83      	ldr	r3, [pc, #524]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e184      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003330:	429a      	cmp	r2, r3
 8003332:	d908      	bls.n	8003346 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003334:	4b78      	ldr	r3, [pc, #480]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	4975      	ldr	r1, [pc, #468]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003342:	4313      	orrs	r3, r2
 8003344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335e:	429a      	cmp	r2, r3
 8003360:	d908      	bls.n	8003374 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003362:	4b6d      	ldr	r3, [pc, #436]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	496a      	ldr	r1, [pc, #424]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003370:	4313      	orrs	r3, r2
 8003372:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800338c:	429a      	cmp	r2, r3
 800338e:	d908      	bls.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003390:	4b61      	ldr	r3, [pc, #388]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	495e      	ldr	r1, [pc, #376]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d908      	bls.n	80033d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4953      	ldr	r1, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d908      	bls.n	80033fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f023 020f 	bic.w	r2, r3, #15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4947      	ldr	r1, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d055      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4940      	ldr	r1, [pc, #256]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003418:	4313      	orrs	r3, r2
 800341a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d107      	bne.n	8003434 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d121      	bne.n	8003474 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0f6      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d107      	bne.n	800344c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d115      	bne.n	8003474 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0ea      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0de      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0d6      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f023 0207 	bic.w	r2, r3, #7
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4925      	ldr	r1, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 8003482:	4313      	orrs	r3, r2
 8003484:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fd fde1 	bl	800104c <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7fd fddd 	bl	800104c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0be      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d1eb      	bne.n	800348e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d010      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d208      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x244>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d214      	bcs.n	800351c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	4906      	ldr	r1, [pc, #24]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCC_ClockConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e086      	b.n	8003622 <HAL_RCC_ClockConfig+0x34e>
 8003514:	52002000 	.word	0x52002000
 8003518:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003534:	429a      	cmp	r2, r3
 8003536:	d208      	bcs.n	800354a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003538:	4b3c      	ldr	r3, [pc, #240]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	4939      	ldr	r1, [pc, #228]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 8003546:	4313      	orrs	r3, r2
 8003548:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003562:	429a      	cmp	r2, r3
 8003564:	d208      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	492e      	ldr	r1, [pc, #184]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003590:	429a      	cmp	r2, r3
 8003592:	d208      	bcs.n	80035a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4922      	ldr	r1, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035be:	429a      	cmp	r2, r3
 80035c0:	d208      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4917      	ldr	r1, [pc, #92]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035d4:	f000 f834 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	4912      	ldr	r1, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x35c>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_RCC_ClockConfig+0x358>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <HAL_RCC_ClockConfig+0x35c>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x360>)
 800360a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x364>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x368>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fcce 	bl	8000fb8 <HAL_InitTick>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	080053b8 	.word	0x080053b8
 8003634:	24000004 	.word	0x24000004
 8003638:	24000000 	.word	0x24000000
 800363c:	24000008 	.word	0x24000008

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003646:	4bb3      	ldr	r3, [pc, #716]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364e:	2b18      	cmp	r3, #24
 8003650:	f200 8155 	bhi.w	80038fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	080036c1 	.word	0x080036c1
 8003660:	080038ff 	.word	0x080038ff
 8003664:	080038ff 	.word	0x080038ff
 8003668:	080038ff 	.word	0x080038ff
 800366c:	080038ff 	.word	0x080038ff
 8003670:	080038ff 	.word	0x080038ff
 8003674:	080038ff 	.word	0x080038ff
 8003678:	080038ff 	.word	0x080038ff
 800367c:	080036e7 	.word	0x080036e7
 8003680:	080038ff 	.word	0x080038ff
 8003684:	080038ff 	.word	0x080038ff
 8003688:	080038ff 	.word	0x080038ff
 800368c:	080038ff 	.word	0x080038ff
 8003690:	080038ff 	.word	0x080038ff
 8003694:	080038ff 	.word	0x080038ff
 8003698:	080038ff 	.word	0x080038ff
 800369c:	080036ed 	.word	0x080036ed
 80036a0:	080038ff 	.word	0x080038ff
 80036a4:	080038ff 	.word	0x080038ff
 80036a8:	080038ff 	.word	0x080038ff
 80036ac:	080038ff 	.word	0x080038ff
 80036b0:	080038ff 	.word	0x080038ff
 80036b4:	080038ff 	.word	0x080038ff
 80036b8:	080038ff 	.word	0x080038ff
 80036bc:	080036f3 	.word	0x080036f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c0:	4b94      	ldr	r3, [pc, #592]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036cc:	4b91      	ldr	r3, [pc, #580]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	08db      	lsrs	r3, r3, #3
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	4a90      	ldr	r2, [pc, #576]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80036de:	e111      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036e0:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036e2:	61bb      	str	r3, [r7, #24]
    break;
 80036e4:	e10e      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036e6:	4b8d      	ldr	r3, [pc, #564]	; (800391c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e8:	61bb      	str	r3, [r7, #24]
    break;
 80036ea:	e10b      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b8c      	ldr	r3, [pc, #560]	; (8003920 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ee:	61bb      	str	r3, [r7, #24]
    break;
 80036f0:	e108      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036fc:	4b85      	ldr	r3, [pc, #532]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003706:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003708:	4b82      	ldr	r3, [pc, #520]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003712:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	08db      	lsrs	r3, r3, #3
 8003718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80e1 	beq.w	80038f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f000 8083 	beq.w	8003844 <HAL_RCC_GetSysClockFreq+0x204>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b02      	cmp	r3, #2
 8003742:	f200 80a1 	bhi.w	8003888 <HAL_RCC_GetSysClockFreq+0x248>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x114>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d056      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003752:	e099      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003754:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02d      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003760:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	08db      	lsrs	r3, r3, #3
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	4a6b      	ldr	r2, [pc, #428]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378a:	4b62      	ldr	r3, [pc, #392]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379a:	ed97 6a02 	vldr	s12, [r7, #8]
 800379e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80037ba:	e087      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003928 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ce:	4b51      	ldr	r3, [pc, #324]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037de:	ed97 6a02 	vldr	s12, [r7, #8]
 80037e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037fe:	e065      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800392c <HAL_RCC_GetSysClockFreq+0x2ec>
 800380e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003812:	4b40      	ldr	r3, [pc, #256]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003822:	ed97 6a02 	vldr	s12, [r7, #8]
 8003826:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e4>
 800382a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003842:	e043      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003930 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003866:	ed97 6a02 	vldr	s12, [r7, #8]
 800386a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003886:	e021      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	eddf 6a26 	vldr	s13, [pc, #152]	; 800392c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	0a5b      	lsrs	r3, r3, #9
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	3301      	adds	r3, #1
 80038d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f0:	ee17 3a90 	vmov	r3, s15
 80038f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80038f6:	e005      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    break;
 80038fc:	e002      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003900:	61bb      	str	r3, [r7, #24]
    break;
 8003902:	bf00      	nop
  }

  return sysclockfreq;
 8003904:	69bb      	ldr	r3, [r7, #24]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400
 8003918:	03d09000 	.word	0x03d09000
 800391c:	003d0900 	.word	0x003d0900
 8003920:	007a1200 	.word	0x007a1200
 8003924:	46000000 	.word	0x46000000
 8003928:	4c742400 	.word	0x4c742400
 800392c:	4a742400 	.word	0x4a742400
 8003930:	4af42400 	.word	0x4af42400

08003934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003940:	2300      	movs	r3, #0
 8003942:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003958:	d02a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800395a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800395e:	d824      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003964:	d018      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800396a:	d81e      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d007      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003976:	e018      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4bab      	ldr	r3, [pc, #684]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4aaa      	ldr	r2, [pc, #680]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003984:	e015      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 ff11 	bl	80047b4 <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003996:	e00c      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 ffba 	bl	8004918 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039a8:	e003      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039b8:	4b9b      	ldr	r3, [pc, #620]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c4:	4998      	ldr	r1, [pc, #608]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	650b      	str	r3, [r1, #80]	; 0x50
 80039ca:	e001      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d826      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a01 	.word	0x08003a01
 80039f0:	08003a0f 	.word	0x08003a0f
 80039f4:	08003a21 	.word	0x08003a21
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a88      	ldr	r2, [pc, #544]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fecd 	bl	80047b4 <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3324      	adds	r3, #36	; 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 ff76 	bl	8004918 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
      break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	f023 0207 	bic.w	r2, r3, #7
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	4976      	ldr	r1, [pc, #472]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	650b      	str	r3, [r1, #80]	; 0x50
 8003a52:	e001      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d042      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a72:	d825      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a74:	2bc0      	cmp	r3, #192	; 0xc0
 8003a76:	d028      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a78:	2bc0      	cmp	r3, #192	; 0xc0
 8003a7a:	d821      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d016      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a80:	2b80      	cmp	r3, #128	; 0x80
 8003a82:	d81d      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d007      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8e:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a9a:	e017      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fe86 	bl	80047b4 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003aac:	e00e      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ff2f 	bl	8004918 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ad2:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	4952      	ldr	r1, [pc, #328]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ae4:	e001      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d049      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b00:	d030      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b06:	d82a      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b0c:	d02c      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b12:	d824      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b18:	d018      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1e:	d81e      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b2a:	e018      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a3d      	ldr	r2, [pc, #244]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b38:	e017      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fe37 	bl	80047b4 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b4a:	e00e      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3324      	adds	r3, #36	; 0x24
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fee0 	bl	8004918 <RCCEx_PLL3_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b5c:	e005      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b7e:	492a      	ldr	r1, [pc, #168]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	658b      	str	r3, [r1, #88]	; 0x58
 8003b84:	e001      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d04c      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba0:	d030      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba6:	d82a      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bac:	d02c      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb2:	d824      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb8:	d018      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bbe:	d81e      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc8:	d007      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003bca:	e018      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bd8:	e017      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fde7 	bl	80047b4 <RCCEx_PLL2_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bea:	e00e      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3324      	adds	r3, #36	; 0x24
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fe90 	bl	8004918 <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bfc:	e005      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c1e:	4902      	ldr	r1, [pc, #8]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	658b      	str	r3, [r1, #88]	; 0x58
 8003c24:	e004      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c26:	bf00      	nop
 8003c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d032      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	d01c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c44:	2b30      	cmp	r3, #48	; 0x30
 8003c46:	d817      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d813      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d10f      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c58:	4baf      	ldr	r3, [pc, #700]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	4aae      	ldr	r2, [pc, #696]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c64:	e00e      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fda1 	bl	80047b4 <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c76:	e005      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c8a:	4ba3      	ldr	r3, [pc, #652]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	49a0      	ldr	r1, [pc, #640]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c9c:	e001      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d047      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb6:	d030      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d82a      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cc2:	d02c      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cc8:	d824      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cce:	d018      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd4:	d81e      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cde:	d007      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ce0:	e018      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	4a8c      	ldr	r2, [pc, #560]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cee:	e017      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fd5c 	bl	80047b4 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d00:	e00e      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3324      	adds	r3, #36	; 0x24
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fe05 	bl	8004918 <RCCEx_PLL3_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d26:	4b7c      	ldr	r3, [pc, #496]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	4979      	ldr	r1, [pc, #484]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	650b      	str	r3, [r1, #80]	; 0x50
 8003d38:	e001      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d049      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d52:	d02e      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d828      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5e:	d02a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d64:	d822      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6a:	d026      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d70:	d81c      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7c:	d816      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01d      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d111      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fd10 	bl	80047b4 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d98:	e012      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3324      	adds	r3, #36	; 0x24
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fdb9 	bl	8004918 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003daa:	e009      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dc6:	4b54      	ldr	r3, [pc, #336]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	4951      	ldr	r1, [pc, #324]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dfa:	d828      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d02a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d822      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e0c:	d026      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e12:	d81c      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1e:	d816      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e28:	d111      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fcbf 	bl	80047b4 <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e3a:	e012      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fd68 	bl	8004918 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e009      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
      break;
 8003e52:	e006      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e54:	bf00      	nop
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e58:	bf00      	nop
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e76:	4928      	ldr	r1, [pc, #160]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02f      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e96:	d00e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d814      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003eb4:	e00c      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fc79 	bl	80047b4 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	490d      	ldr	r1, [pc, #52]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8003ee8:	e001      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d033      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d81c      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f43 	.word	0x08003f43
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f2b 	.word	0x08003f2b
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1c:	4bb8      	ldr	r3, [pc, #736]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4ab7      	ldr	r2, [pc, #732]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f28:	e00c      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fc3f 	bl	80047b4 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f4a:	4bad      	ldr	r3, [pc, #692]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	f023 0203 	bic.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	49aa      	ldr	r1, [pc, #680]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8086 	beq.w	800407c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f70:	4ba4      	ldr	r3, [pc, #656]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4aa3      	ldr	r2, [pc, #652]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f866 	bl	800104c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fd f862 	bl	800104c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d902      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	75fb      	strb	r3, [r7, #23]
        break;
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f98:	4b9a      	ldr	r3, [pc, #616]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ef      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d166      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003faa:	4b95      	ldr	r3, [pc, #596]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fb4:	4053      	eors	r3, r2
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d013      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fbe:	4b90      	ldr	r3, [pc, #576]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fc8:	4b8d      	ldr	r3, [pc, #564]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a8c      	ldr	r2, [pc, #560]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd4:	4b8a      	ldr	r3, [pc, #552]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a89      	ldr	r2, [pc, #548]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fe0:	4a87      	ldr	r2, [pc, #540]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff0:	d115      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff2:	f7fd f82b 	bl	800104c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff8:	e00b      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7fd f827 	bl	800104c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d902      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	75fb      	strb	r3, [r7, #23]
            break;
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ed      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d126      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004032:	d10d      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004034:	4b72      	ldr	r3, [pc, #456]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004042:	0919      	lsrs	r1, r3, #4
 8004044:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004046:	400b      	ands	r3, r1
 8004048:	496d      	ldr	r1, [pc, #436]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004050:	4b6b      	ldr	r3, [pc, #428]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	4a6a      	ldr	r2, [pc, #424]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800405a:	6113      	str	r3, [r2, #16]
 800405c:	4b68      	ldr	r3, [pc, #416]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800405e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	4965      	ldr	r1, [pc, #404]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	670b      	str	r3, [r1, #112]	; 0x70
 8004070:	e004      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	75bb      	strb	r3, [r7, #22]
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d07e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408c:	2b28      	cmp	r3, #40	; 0x28
 800408e:	d867      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	08004167 	.word	0x08004167
 800409c:	08004161 	.word	0x08004161
 80040a0:	08004161 	.word	0x08004161
 80040a4:	08004161 	.word	0x08004161
 80040a8:	08004161 	.word	0x08004161
 80040ac:	08004161 	.word	0x08004161
 80040b0:	08004161 	.word	0x08004161
 80040b4:	08004161 	.word	0x08004161
 80040b8:	0800413d 	.word	0x0800413d
 80040bc:	08004161 	.word	0x08004161
 80040c0:	08004161 	.word	0x08004161
 80040c4:	08004161 	.word	0x08004161
 80040c8:	08004161 	.word	0x08004161
 80040cc:	08004161 	.word	0x08004161
 80040d0:	08004161 	.word	0x08004161
 80040d4:	08004161 	.word	0x08004161
 80040d8:	0800414f 	.word	0x0800414f
 80040dc:	08004161 	.word	0x08004161
 80040e0:	08004161 	.word	0x08004161
 80040e4:	08004161 	.word	0x08004161
 80040e8:	08004161 	.word	0x08004161
 80040ec:	08004161 	.word	0x08004161
 80040f0:	08004161 	.word	0x08004161
 80040f4:	08004161 	.word	0x08004161
 80040f8:	08004167 	.word	0x08004167
 80040fc:	08004161 	.word	0x08004161
 8004100:	08004161 	.word	0x08004161
 8004104:	08004161 	.word	0x08004161
 8004108:	08004161 	.word	0x08004161
 800410c:	08004161 	.word	0x08004161
 8004110:	08004161 	.word	0x08004161
 8004114:	08004161 	.word	0x08004161
 8004118:	08004167 	.word	0x08004167
 800411c:	08004161 	.word	0x08004161
 8004120:	08004161 	.word	0x08004161
 8004124:	08004161 	.word	0x08004161
 8004128:	08004161 	.word	0x08004161
 800412c:	08004161 	.word	0x08004161
 8004130:	08004161 	.word	0x08004161
 8004134:	08004161 	.word	0x08004161
 8004138:	08004167 	.word	0x08004167
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb36 	bl	80047b4 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800414c:	e00c      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fbdf 	bl	8004918 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	e000      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417a:	4921      	ldr	r1, [pc, #132]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	654b      	str	r3, [r1, #84]	; 0x54
 8004180:	e001      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d03e      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	2b05      	cmp	r3, #5
 8004198:	d820      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041e3 	.word	0x080041e3
 80041a4:	080041b9 	.word	0x080041b9
 80041a8:	080041cb 	.word	0x080041cb
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	080041e3 	.word	0x080041e3
 80041b4:	080041e3 	.word	0x080041e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 faf8 	bl	80047b4 <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041c8:	e00c      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3324      	adds	r3, #36	; 0x24
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fba1 	bl	8004918 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	75fb      	strb	r3, [r7, #23]
      break;
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80041e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d110      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f023 0207 	bic.w	r2, r3, #7
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	4902      	ldr	r1, [pc, #8]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	654b      	str	r3, [r1, #84]	; 0x54
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	58024800 	.word	0x58024800
 8004208:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d039      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	2b05      	cmp	r3, #5
 8004224:	d820      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800426f 	.word	0x0800426f
 8004230:	08004245 	.word	0x08004245
 8004234:	08004257 	.word	0x08004257
 8004238:	0800426f 	.word	0x0800426f
 800423c:	0800426f 	.word	0x0800426f
 8004240:	0800426f 	.word	0x0800426f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fab2 	bl	80047b4 <RCCEx_PLL2_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004254:	e00c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3324      	adds	r3, #36	; 0x24
 800425a:	2101      	movs	r1, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fb5b 	bl	8004918 <RCCEx_PLL3_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004276:	4bb7      	ldr	r3, [pc, #732]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f023 0207 	bic.w	r2, r3, #7
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	49b3      	ldr	r1, [pc, #716]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004286:	4313      	orrs	r3, r2
 8004288:	658b      	str	r3, [r1, #88]	; 0x58
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d04b      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a6:	d02e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80042a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ac:	d828      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d02a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d822      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042be:	d026      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80042c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042c4:	d81c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ca:	d010      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80042cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d0:	d816      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01d      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80042d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042da:	d111      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fa66 	bl	80047b4 <RCCEx_PLL2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042ec:	e012      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3324      	adds	r3, #36	; 0x24
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fb0f 	bl	8004918 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004306:	bf00      	nop
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b8e      	ldr	r3, [pc, #568]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004328:	498a      	ldr	r1, [pc, #552]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800432a:	4313      	orrs	r3, r2
 800432c:	654b      	str	r3, [r1, #84]	; 0x54
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d04b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800434a:	d02e      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800434c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004350:	d828      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	d02a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d822      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800435e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004362:	d026      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004368:	d81c      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800436a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436e:	d010      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d816      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437e:	d111      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fa14 	bl	80047b4 <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004390:	e012      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fabd 	bl	8004918 <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043a2:	e009      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
      break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043aa:	bf00      	nop
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043cc:	4961      	ldr	r1, [pc, #388]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	658b      	str	r3, [r1, #88]	; 0x58
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d04b      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043ee:	d02e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80043f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043f4:	d828      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d02a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	d822      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004402:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004406:	d026      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800440c:	d81c      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800440e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004412:	d010      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004418:	d816      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01d      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004422:	d111      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9c2 	bl	80047b4 <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004434:	e012      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	; 0x24
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fa6b 	bl	8004918 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004446:	e009      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	e006      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800444e:	bf00      	nop
 8004450:	e004      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004452:	bf00      	nop
 8004454:	e002      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800445a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004462:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004470:	4938      	ldr	r1, [pc, #224]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004472:	4313      	orrs	r3, r2
 8004474:	658b      	str	r3, [r1, #88]	; 0x58
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d10a      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	2102      	movs	r1, #2
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fa3c 	bl	8004918 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b8:	4926      	ldr	r1, [pc, #152]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d4:	d10a      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3324      	adds	r3, #36	; 0x24
 80044da:	2102      	movs	r1, #2
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa1b 	bl	8004918 <RCCEx_PLL3_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	4916      	ldr	r1, [pc, #88]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d036      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d01f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800451c:	d817      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d009      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004528:	e011      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f93f 	bl	80047b4 <RCCEx_PLL2_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800453a:	e00e      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	2102      	movs	r1, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f9e8 	bl	8004918 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
      break;
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004554:	58024400 	.word	0x58024400
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800456e:	4990      	ldr	r1, [pc, #576]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	658b      	str	r3, [r1, #88]	; 0x58
 8004574:	e001      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d033      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004590:	d01c      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004596:	d816      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459c:	d003      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800459e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a2:	d007      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80045a4:	e00f      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4a81      	ldr	r2, [pc, #516]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045b2:	e00c      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f9ac 	bl	8004918 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80045cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d4:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	4973      	ldr	r1, [pc, #460]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	654b      	str	r3, [r1, #84]	; 0x54
 80045e8:	e001      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d029      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004606:	d007      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800460a:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004616:	e00b      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f8c8 	bl	80047b4 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004628:	e002      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      break;
 800462e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004636:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	495b      	ldr	r1, [pc, #364]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004648:	e001      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f959 	bl	8004918 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d030      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004684:	d017      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d811      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004690:	d013      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004696:	d80b      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a2:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	4a42      	ldr	r2, [pc, #264]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046ae:	e007      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e004      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d2:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	654b      	str	r3, [r1, #84]	; 0x54
 80046d8:	e001      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	492e      	ldr	r1, [pc, #184]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004716:	4926      	ldr	r1, [pc, #152]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004728:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004734:	491e      	ldr	r1, [pc, #120]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800474c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004750:	6113      	str	r3, [r2, #16]
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800475c:	4914      	ldr	r1, [pc, #80]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da08      	bge.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800479c:	7dbb      	ldrb	r3, [r7, #22]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58024400 	.word	0x58024400

080047b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047c2:	4b53      	ldr	r3, [pc, #332]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d101      	bne.n	80047d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e099      	b.n	8004906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80047d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047de:	f7fc fc35 	bl	800104c <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047e6:	f7fc fc31 	bl	800104c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e086      	b.n	8004906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004804:	4b42      	ldr	r3, [pc, #264]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	031b      	lsls	r3, r3, #12
 8004812:	493f      	ldr	r1, [pc, #252]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	628b      	str	r3, [r1, #40]	; 0x28
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	3b01      	subs	r3, #1
 8004828:	025b      	lsls	r3, r3, #9
 800482a:	b29b      	uxth	r3, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	3b01      	subs	r3, #1
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004848:	4931      	ldr	r1, [pc, #196]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800484e:	4b30      	ldr	r3, [pc, #192]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	492d      	ldr	r1, [pc, #180]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004860:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	f023 0220 	bic.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4928      	ldr	r1, [pc, #160]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004878:	f023 0310 	bic.w	r3, r3, #16
 800487c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <RCCEx_PLL2_Config+0x160>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	69d2      	ldr	r2, [r2, #28]
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	4920      	ldr	r1, [pc, #128]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004892:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 8004898:	f043 0310 	orr.w	r3, r3, #16
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048b0:	e00f      	b.n	80048d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d106      	bne.n	80048c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048c4:	e005      	b.n	80048d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048de:	f7fc fbb5 	bl	800104c <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048e4:	e008      	b.n	80048f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048e6:	f7fc fbb1 	bl	800104c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e006      	b.n	8004906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
 8004914:	ffff0007 	.word	0xffff0007

08004918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d101      	bne.n	8004936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e099      	b.n	8004a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004936:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4e      	ldr	r2, [pc, #312]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 800493c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004942:	f7fc fb83 	bl	800104c <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004948:	e008      	b.n	800495c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800494a:	f7fc fb7f 	bl	800104c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e086      	b.n	8004a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800495c:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004968:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	051b      	lsls	r3, r3, #20
 8004976:	493f      	ldr	r1, [pc, #252]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	628b      	str	r3, [r1, #40]	; 0x28
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	3b01      	subs	r3, #1
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	b29b      	uxth	r3, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049ac:	4931      	ldr	r1, [pc, #196]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049b2:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	492d      	ldr	r1, [pc, #180]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049c4:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	4928      	ldr	r1, [pc, #160]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <RCCEx_PLL3_Config+0x160>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	69d2      	ldr	r2, [r2, #28]
 80049ee:	00d2      	lsls	r2, r2, #3
 80049f0:	4920      	ldr	r1, [pc, #128]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a14:	e00f      	b.n	8004a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fc fb03 	bl	800104c <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a4a:	f7fc faff 	bl	800104c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e006      	b.n	8004a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
 8004a78:	ffff0007 	.word	0xffff0007

08004a7c <__errno>:
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <__errno+0x8>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	24000010 	.word	0x24000010

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4d0d      	ldr	r5, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2600      	movs	r6, #0
 8004a94:	42a6      	cmp	r6, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4d0b      	ldr	r5, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f000 fc4e 	bl	800533c <_init>
 8004aa0:	1b64      	subs	r4, r4, r5
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	42a6      	cmp	r6, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab0:	4798      	blx	r3
 8004ab2:	3601      	adds	r6, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aba:	4798      	blx	r3
 8004abc:	3601      	adds	r6, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	0800540c 	.word	0x0800540c
 8004ac4:	0800540c 	.word	0x0800540c
 8004ac8:	0800540c 	.word	0x0800540c
 8004acc:	08005410 	.word	0x08005410

08004ad0 <memcpy>:
 8004ad0:	440a      	add	r2, r1
 8004ad2:	4291      	cmp	r1, r2
 8004ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ad8:	d100      	bne.n	8004adc <memcpy+0xc>
 8004ada:	4770      	bx	lr
 8004adc:	b510      	push	{r4, lr}
 8004ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ae6:	4291      	cmp	r1, r2
 8004ae8:	d1f9      	bne.n	8004ade <memcpy+0xe>
 8004aea:	bd10      	pop	{r4, pc}

08004aec <memset>:
 8004aec:	4402      	add	r2, r0
 8004aee:	4603      	mov	r3, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d100      	bne.n	8004af6 <memset+0xa>
 8004af4:	4770      	bx	lr
 8004af6:	f803 1b01 	strb.w	r1, [r3], #1
 8004afa:	e7f9      	b.n	8004af0 <memset+0x4>

08004afc <siprintf>:
 8004afc:	b40e      	push	{r1, r2, r3}
 8004afe:	b500      	push	{lr}
 8004b00:	b09c      	sub	sp, #112	; 0x70
 8004b02:	ab1d      	add	r3, sp, #116	; 0x74
 8004b04:	9002      	str	r0, [sp, #8]
 8004b06:	9006      	str	r0, [sp, #24]
 8004b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b0c:	4809      	ldr	r0, [pc, #36]	; (8004b34 <siprintf+0x38>)
 8004b0e:	9107      	str	r1, [sp, #28]
 8004b10:	9104      	str	r1, [sp, #16]
 8004b12:	4909      	ldr	r1, [pc, #36]	; (8004b38 <siprintf+0x3c>)
 8004b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b18:	9105      	str	r1, [sp, #20]
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	a902      	add	r1, sp, #8
 8004b20:	f000 f868 	bl	8004bf4 <_svfiprintf_r>
 8004b24:	9b02      	ldr	r3, [sp, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	b01c      	add	sp, #112	; 0x70
 8004b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b30:	b003      	add	sp, #12
 8004b32:	4770      	bx	lr
 8004b34:	24000010 	.word	0x24000010
 8004b38:	ffff0208 	.word	0xffff0208

08004b3c <__ssputs_r>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	688e      	ldr	r6, [r1, #8]
 8004b42:	429e      	cmp	r6, r3
 8004b44:	4682      	mov	sl, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	4690      	mov	r8, r2
 8004b4a:	461f      	mov	r7, r3
 8004b4c:	d838      	bhi.n	8004bc0 <__ssputs_r+0x84>
 8004b4e:	898a      	ldrh	r2, [r1, #12]
 8004b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b54:	d032      	beq.n	8004bbc <__ssputs_r+0x80>
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	6909      	ldr	r1, [r1, #16]
 8004b5a:	eba5 0901 	sub.w	r9, r5, r1
 8004b5e:	6965      	ldr	r5, [r4, #20]
 8004b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b68:	3301      	adds	r3, #1
 8004b6a:	444b      	add	r3, r9
 8004b6c:	106d      	asrs	r5, r5, #1
 8004b6e:	429d      	cmp	r5, r3
 8004b70:	bf38      	it	cc
 8004b72:	461d      	movcc	r5, r3
 8004b74:	0553      	lsls	r3, r2, #21
 8004b76:	d531      	bpl.n	8004bdc <__ssputs_r+0xa0>
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f000 fb39 	bl	80051f0 <_malloc_r>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	b950      	cbnz	r0, 8004b98 <__ssputs_r+0x5c>
 8004b82:	230c      	movs	r3, #12
 8004b84:	f8ca 3000 	str.w	r3, [sl]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	6921      	ldr	r1, [r4, #16]
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	f7ff ff98 	bl	8004ad0 <memcpy>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	6126      	str	r6, [r4, #16]
 8004bae:	6165      	str	r5, [r4, #20]
 8004bb0:	444e      	add	r6, r9
 8004bb2:	eba5 0509 	sub.w	r5, r5, r9
 8004bb6:	6026      	str	r6, [r4, #0]
 8004bb8:	60a5      	str	r5, [r4, #8]
 8004bba:	463e      	mov	r6, r7
 8004bbc:	42be      	cmp	r6, r7
 8004bbe:	d900      	bls.n	8004bc2 <__ssputs_r+0x86>
 8004bc0:	463e      	mov	r6, r7
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	6820      	ldr	r0, [r4, #0]
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	f000 faa8 	bl	800511c <memmove>
 8004bcc:	68a3      	ldr	r3, [r4, #8]
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	1b9b      	subs	r3, r3, r6
 8004bd2:	4432      	add	r2, r6
 8004bd4:	60a3      	str	r3, [r4, #8]
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e7db      	b.n	8004b94 <__ssputs_r+0x58>
 8004bdc:	462a      	mov	r2, r5
 8004bde:	f000 fb61 	bl	80052a4 <_realloc_r>
 8004be2:	4606      	mov	r6, r0
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1e1      	bne.n	8004bac <__ssputs_r+0x70>
 8004be8:	6921      	ldr	r1, [r4, #16]
 8004bea:	4650      	mov	r0, sl
 8004bec:	f000 fab0 	bl	8005150 <_free_r>
 8004bf0:	e7c7      	b.n	8004b82 <__ssputs_r+0x46>
	...

08004bf4 <_svfiprintf_r>:
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	898b      	ldrh	r3, [r1, #12]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	b09d      	sub	sp, #116	; 0x74
 8004c00:	4607      	mov	r7, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	d50e      	bpl.n	8004c26 <_svfiprintf_r+0x32>
 8004c08:	690b      	ldr	r3, [r1, #16]
 8004c0a:	b963      	cbnz	r3, 8004c26 <_svfiprintf_r+0x32>
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	f000 faef 	bl	80051f0 <_malloc_r>
 8004c12:	6028      	str	r0, [r5, #0]
 8004c14:	6128      	str	r0, [r5, #16]
 8004c16:	b920      	cbnz	r0, 8004c22 <_svfiprintf_r+0x2e>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e0d1      	b.n	8004dc6 <_svfiprintf_r+0x1d2>
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	616b      	str	r3, [r5, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c34:	2330      	movs	r3, #48	; 0x30
 8004c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004de0 <_svfiprintf_r+0x1ec>
 8004c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c3e:	f04f 0901 	mov.w	r9, #1
 8004c42:	4623      	mov	r3, r4
 8004c44:	469a      	mov	sl, r3
 8004c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c4a:	b10a      	cbz	r2, 8004c50 <_svfiprintf_r+0x5c>
 8004c4c:	2a25      	cmp	r2, #37	; 0x25
 8004c4e:	d1f9      	bne.n	8004c44 <_svfiprintf_r+0x50>
 8004c50:	ebba 0b04 	subs.w	fp, sl, r4
 8004c54:	d00b      	beq.n	8004c6e <_svfiprintf_r+0x7a>
 8004c56:	465b      	mov	r3, fp
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f7ff ff6d 	bl	8004b3c <__ssputs_r>
 8004c62:	3001      	adds	r0, #1
 8004c64:	f000 80aa 	beq.w	8004dbc <_svfiprintf_r+0x1c8>
 8004c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6a:	445a      	add	r2, fp
 8004c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a2 	beq.w	8004dbc <_svfiprintf_r+0x1c8>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c82:	f10a 0a01 	add.w	sl, sl, #1
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c90:	4654      	mov	r4, sl
 8004c92:	2205      	movs	r2, #5
 8004c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c98:	4851      	ldr	r0, [pc, #324]	; (8004de0 <_svfiprintf_r+0x1ec>)
 8004c9a:	f7fb fb21 	bl	80002e0 <memchr>
 8004c9e:	9a04      	ldr	r2, [sp, #16]
 8004ca0:	b9d8      	cbnz	r0, 8004cda <_svfiprintf_r+0xe6>
 8004ca2:	06d0      	lsls	r0, r2, #27
 8004ca4:	bf44      	itt	mi
 8004ca6:	2320      	movmi	r3, #32
 8004ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cac:	0711      	lsls	r1, r2, #28
 8004cae:	bf44      	itt	mi
 8004cb0:	232b      	movmi	r3, #43	; 0x2b
 8004cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cba:	2b2a      	cmp	r3, #42	; 0x2a
 8004cbc:	d015      	beq.n	8004cea <_svfiprintf_r+0xf6>
 8004cbe:	9a07      	ldr	r2, [sp, #28]
 8004cc0:	4654      	mov	r4, sl
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	4621      	mov	r1, r4
 8004cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cce:	3b30      	subs	r3, #48	; 0x30
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	d94e      	bls.n	8004d72 <_svfiprintf_r+0x17e>
 8004cd4:	b1b0      	cbz	r0, 8004d04 <_svfiprintf_r+0x110>
 8004cd6:	9207      	str	r2, [sp, #28]
 8004cd8:	e014      	b.n	8004d04 <_svfiprintf_r+0x110>
 8004cda:	eba0 0308 	sub.w	r3, r0, r8
 8004cde:	fa09 f303 	lsl.w	r3, r9, r3
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	9304      	str	r3, [sp, #16]
 8004ce6:	46a2      	mov	sl, r4
 8004ce8:	e7d2      	b.n	8004c90 <_svfiprintf_r+0x9c>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	1d19      	adds	r1, r3, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	9103      	str	r1, [sp, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bfbb      	ittet	lt
 8004cf6:	425b      	neglt	r3, r3
 8004cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cfc:	9307      	strge	r3, [sp, #28]
 8004cfe:	9307      	strlt	r3, [sp, #28]
 8004d00:	bfb8      	it	lt
 8004d02:	9204      	strlt	r2, [sp, #16]
 8004d04:	7823      	ldrb	r3, [r4, #0]
 8004d06:	2b2e      	cmp	r3, #46	; 0x2e
 8004d08:	d10c      	bne.n	8004d24 <_svfiprintf_r+0x130>
 8004d0a:	7863      	ldrb	r3, [r4, #1]
 8004d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0e:	d135      	bne.n	8004d7c <_svfiprintf_r+0x188>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	9203      	str	r2, [sp, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfb8      	it	lt
 8004d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d20:	3402      	adds	r4, #2
 8004d22:	9305      	str	r3, [sp, #20]
 8004d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004df0 <_svfiprintf_r+0x1fc>
 8004d28:	7821      	ldrb	r1, [r4, #0]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	4650      	mov	r0, sl
 8004d2e:	f7fb fad7 	bl	80002e0 <memchr>
 8004d32:	b140      	cbz	r0, 8004d46 <_svfiprintf_r+0x152>
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	eba0 000a 	sub.w	r0, r0, sl
 8004d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	4303      	orrs	r3, r0
 8004d42:	3401      	adds	r4, #1
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	4826      	ldr	r0, [pc, #152]	; (8004de4 <_svfiprintf_r+0x1f0>)
 8004d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d50:	2206      	movs	r2, #6
 8004d52:	f7fb fac5 	bl	80002e0 <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d038      	beq.n	8004dcc <_svfiprintf_r+0x1d8>
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <_svfiprintf_r+0x1f4>)
 8004d5c:	bb1b      	cbnz	r3, 8004da6 <_svfiprintf_r+0x1b2>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	3308      	adds	r3, #8
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	4433      	add	r3, r6
 8004d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d70:	e767      	b.n	8004c42 <_svfiprintf_r+0x4e>
 8004d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d76:	460c      	mov	r4, r1
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7a5      	b.n	8004cc8 <_svfiprintf_r+0xd4>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8e:	3a30      	subs	r2, #48	; 0x30
 8004d90:	2a09      	cmp	r2, #9
 8004d92:	d903      	bls.n	8004d9c <_svfiprintf_r+0x1a8>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0c5      	beq.n	8004d24 <_svfiprintf_r+0x130>
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	e7c3      	b.n	8004d24 <_svfiprintf_r+0x130>
 8004d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da0:	4604      	mov	r4, r0
 8004da2:	2301      	movs	r3, #1
 8004da4:	e7f0      	b.n	8004d88 <_svfiprintf_r+0x194>
 8004da6:	ab03      	add	r3, sp, #12
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <_svfiprintf_r+0x1f8>)
 8004dae:	a904      	add	r1, sp, #16
 8004db0:	4638      	mov	r0, r7
 8004db2:	f3af 8000 	nop.w
 8004db6:	1c42      	adds	r2, r0, #1
 8004db8:	4606      	mov	r6, r0
 8004dba:	d1d6      	bne.n	8004d6a <_svfiprintf_r+0x176>
 8004dbc:	89ab      	ldrh	r3, [r5, #12]
 8004dbe:	065b      	lsls	r3, r3, #25
 8004dc0:	f53f af2c 	bmi.w	8004c1c <_svfiprintf_r+0x28>
 8004dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc6:	b01d      	add	sp, #116	; 0x74
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <_svfiprintf_r+0x1f8>)
 8004dd4:	a904      	add	r1, sp, #16
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f000 f87a 	bl	8004ed0 <_printf_i>
 8004ddc:	e7eb      	b.n	8004db6 <_svfiprintf_r+0x1c2>
 8004dde:	bf00      	nop
 8004de0:	080053d8 	.word	0x080053d8
 8004de4:	080053e2 	.word	0x080053e2
 8004de8:	00000000 	.word	0x00000000
 8004dec:	08004b3d 	.word	0x08004b3d
 8004df0:	080053de 	.word	0x080053de

08004df4 <_printf_common>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	4616      	mov	r6, r2
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfb8      	it	lt
 8004e08:	4613      	movlt	r3, r2
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e10:	4607      	mov	r7, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	b10a      	cbz	r2, 8004e1a <_printf_common+0x26>
 8004e16:	3301      	adds	r3, #1
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	0699      	lsls	r1, r3, #26
 8004e1e:	bf42      	ittt	mi
 8004e20:	6833      	ldrmi	r3, [r6, #0]
 8004e22:	3302      	addmi	r3, #2
 8004e24:	6033      	strmi	r3, [r6, #0]
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	f015 0506 	ands.w	r5, r5, #6
 8004e2c:	d106      	bne.n	8004e3c <_printf_common+0x48>
 8004e2e:	f104 0a19 	add.w	sl, r4, #25
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	6832      	ldr	r2, [r6, #0]
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	dc26      	bgt.n	8004e8a <_printf_common+0x96>
 8004e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e40:	1e13      	subs	r3, r2, #0
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	bf18      	it	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	0692      	lsls	r2, r2, #26
 8004e4a:	d42b      	bmi.n	8004ea4 <_printf_common+0xb0>
 8004e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d01e      	beq.n	8004e98 <_printf_common+0xa4>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	68e5      	ldr	r5, [r4, #12]
 8004e5e:	6832      	ldr	r2, [r6, #0]
 8004e60:	f003 0306 	and.w	r3, r3, #6
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	bf08      	it	eq
 8004e68:	1aad      	subeq	r5, r5, r2
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	bf0c      	ite	eq
 8004e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e74:	2500      	movne	r5, #0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bfc4      	itt	gt
 8004e7a:	1a9b      	subgt	r3, r3, r2
 8004e7c:	18ed      	addgt	r5, r5, r3
 8004e7e:	2600      	movs	r6, #0
 8004e80:	341a      	adds	r4, #26
 8004e82:	42b5      	cmp	r5, r6
 8004e84:	d11a      	bne.n	8004ebc <_printf_common+0xc8>
 8004e86:	2000      	movs	r0, #0
 8004e88:	e008      	b.n	8004e9c <_printf_common+0xa8>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4638      	mov	r0, r7
 8004e92:	47c0      	blx	r8
 8004e94:	3001      	adds	r0, #1
 8004e96:	d103      	bne.n	8004ea0 <_printf_common+0xac>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	e7c6      	b.n	8004e32 <_printf_common+0x3e>
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	2030      	movs	r0, #48	; 0x30
 8004eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eae:	4422      	add	r2, r4
 8004eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb8:	3302      	adds	r3, #2
 8004eba:	e7c7      	b.n	8004e4c <_printf_common+0x58>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d0e6      	beq.n	8004e98 <_printf_common+0xa4>
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7d9      	b.n	8004e82 <_printf_common+0x8e>
	...

08004ed0 <_printf_i>:
 8004ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4691      	mov	r9, r2
 8004ed8:	7e27      	ldrb	r7, [r4, #24]
 8004eda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004edc:	2f78      	cmp	r7, #120	; 0x78
 8004ede:	4680      	mov	r8, r0
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee6:	d807      	bhi.n	8004ef8 <_printf_i+0x28>
 8004ee8:	2f62      	cmp	r7, #98	; 0x62
 8004eea:	d80a      	bhi.n	8004f02 <_printf_i+0x32>
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f000 80d8 	beq.w	80050a2 <_printf_i+0x1d2>
 8004ef2:	2f58      	cmp	r7, #88	; 0x58
 8004ef4:	f000 80a3 	beq.w	800503e <_printf_i+0x16e>
 8004ef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f00:	e03a      	b.n	8004f78 <_printf_i+0xa8>
 8004f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f06:	2b15      	cmp	r3, #21
 8004f08:	d8f6      	bhi.n	8004ef8 <_printf_i+0x28>
 8004f0a:	a001      	add	r0, pc, #4	; (adr r0, 8004f10 <_printf_i+0x40>)
 8004f0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f7d 	.word	0x08004f7d
 8004f18:	08004ef9 	.word	0x08004ef9
 8004f1c:	08004ef9 	.word	0x08004ef9
 8004f20:	08004ef9 	.word	0x08004ef9
 8004f24:	08004ef9 	.word	0x08004ef9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ef9 	.word	0x08004ef9
 8004f30:	08004ef9 	.word	0x08004ef9
 8004f34:	08004ef9 	.word	0x08004ef9
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08005089 	.word	0x08005089
 8004f40:	08004fad 	.word	0x08004fad
 8004f44:	0800506b 	.word	0x0800506b
 8004f48:	08004ef9 	.word	0x08004ef9
 8004f4c:	08004ef9 	.word	0x08004ef9
 8004f50:	080050ab 	.word	0x080050ab
 8004f54:	08004ef9 	.word	0x08004ef9
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004ef9 	.word	0x08004ef9
 8004f60:	08004ef9 	.word	0x08004ef9
 8004f64:	08005073 	.word	0x08005073
 8004f68:	680b      	ldr	r3, [r1, #0]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	600a      	str	r2, [r1, #0]
 8004f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0a3      	b.n	80050c4 <_printf_i+0x1f4>
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	6808      	ldr	r0, [r1, #0]
 8004f80:	062e      	lsls	r6, r5, #24
 8004f82:	f100 0304 	add.w	r3, r0, #4
 8004f86:	d50a      	bpl.n	8004f9e <_printf_i+0xce>
 8004f88:	6805      	ldr	r5, [r0, #0]
 8004f8a:	600b      	str	r3, [r1, #0]
 8004f8c:	2d00      	cmp	r5, #0
 8004f8e:	da03      	bge.n	8004f98 <_printf_i+0xc8>
 8004f90:	232d      	movs	r3, #45	; 0x2d
 8004f92:	426d      	negs	r5, r5
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	485e      	ldr	r0, [pc, #376]	; (8005114 <_printf_i+0x244>)
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e019      	b.n	8004fd2 <_printf_i+0x102>
 8004f9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fa2:	6805      	ldr	r5, [r0, #0]
 8004fa4:	600b      	str	r3, [r1, #0]
 8004fa6:	bf18      	it	ne
 8004fa8:	b22d      	sxthne	r5, r5
 8004faa:	e7ef      	b.n	8004f8c <_printf_i+0xbc>
 8004fac:	680b      	ldr	r3, [r1, #0]
 8004fae:	6825      	ldr	r5, [r4, #0]
 8004fb0:	1d18      	adds	r0, r3, #4
 8004fb2:	6008      	str	r0, [r1, #0]
 8004fb4:	0628      	lsls	r0, r5, #24
 8004fb6:	d501      	bpl.n	8004fbc <_printf_i+0xec>
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <_printf_i+0xf2>
 8004fbc:	0669      	lsls	r1, r5, #25
 8004fbe:	d5fb      	bpl.n	8004fb8 <_printf_i+0xe8>
 8004fc0:	881d      	ldrh	r5, [r3, #0]
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_printf_i+0x244>)
 8004fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2308      	moveq	r3, #8
 8004fca:	230a      	movne	r3, #10
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd2:	6866      	ldr	r6, [r4, #4]
 8004fd4:	60a6      	str	r6, [r4, #8]
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	bfa2      	ittt	ge
 8004fda:	6821      	ldrge	r1, [r4, #0]
 8004fdc:	f021 0104 	bicge.w	r1, r1, #4
 8004fe0:	6021      	strge	r1, [r4, #0]
 8004fe2:	b90d      	cbnz	r5, 8004fe8 <_printf_i+0x118>
 8004fe4:	2e00      	cmp	r6, #0
 8004fe6:	d04d      	beq.n	8005084 <_printf_i+0x1b4>
 8004fe8:	4616      	mov	r6, r2
 8004fea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fee:	fb03 5711 	mls	r7, r3, r1, r5
 8004ff2:	5dc7      	ldrb	r7, [r0, r7]
 8004ff4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ff8:	462f      	mov	r7, r5
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	460d      	mov	r5, r1
 8004ffe:	d9f4      	bls.n	8004fea <_printf_i+0x11a>
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10b      	bne.n	800501c <_printf_i+0x14c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07df      	lsls	r7, r3, #31
 8005008:	d508      	bpl.n	800501c <_printf_i+0x14c>
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	4299      	cmp	r1, r3
 8005010:	bfde      	ittt	le
 8005012:	2330      	movle	r3, #48	; 0x30
 8005014:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005018:	f106 36ff 	addle.w	r6, r6, #4294967295
 800501c:	1b92      	subs	r2, r2, r6
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	f8cd a000 	str.w	sl, [sp]
 8005024:	464b      	mov	r3, r9
 8005026:	aa03      	add	r2, sp, #12
 8005028:	4621      	mov	r1, r4
 800502a:	4640      	mov	r0, r8
 800502c:	f7ff fee2 	bl	8004df4 <_printf_common>
 8005030:	3001      	adds	r0, #1
 8005032:	d14c      	bne.n	80050ce <_printf_i+0x1fe>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	b004      	add	sp, #16
 800503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503e:	4835      	ldr	r0, [pc, #212]	; (8005114 <_printf_i+0x244>)
 8005040:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	680e      	ldr	r6, [r1, #0]
 8005048:	061f      	lsls	r7, r3, #24
 800504a:	f856 5b04 	ldr.w	r5, [r6], #4
 800504e:	600e      	str	r6, [r1, #0]
 8005050:	d514      	bpl.n	800507c <_printf_i+0x1ac>
 8005052:	07d9      	lsls	r1, r3, #31
 8005054:	bf44      	itt	mi
 8005056:	f043 0320 	orrmi.w	r3, r3, #32
 800505a:	6023      	strmi	r3, [r4, #0]
 800505c:	b91d      	cbnz	r5, 8005066 <_printf_i+0x196>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f023 0320 	bic.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	2310      	movs	r3, #16
 8005068:	e7b0      	b.n	8004fcc <_printf_i+0xfc>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2378      	movs	r3, #120	; 0x78
 8005074:	4828      	ldr	r0, [pc, #160]	; (8005118 <_printf_i+0x248>)
 8005076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507a:	e7e3      	b.n	8005044 <_printf_i+0x174>
 800507c:	065e      	lsls	r6, r3, #25
 800507e:	bf48      	it	mi
 8005080:	b2ad      	uxthmi	r5, r5
 8005082:	e7e6      	b.n	8005052 <_printf_i+0x182>
 8005084:	4616      	mov	r6, r2
 8005086:	e7bb      	b.n	8005000 <_printf_i+0x130>
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	6826      	ldr	r6, [r4, #0]
 800508c:	6960      	ldr	r0, [r4, #20]
 800508e:	1d1d      	adds	r5, r3, #4
 8005090:	600d      	str	r5, [r1, #0]
 8005092:	0635      	lsls	r5, r6, #24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	d501      	bpl.n	800509c <_printf_i+0x1cc>
 8005098:	6018      	str	r0, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0x1d2>
 800509c:	0671      	lsls	r1, r6, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0x1c8>
 80050a0:	8018      	strh	r0, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	4616      	mov	r6, r2
 80050a8:	e7ba      	b.n	8005020 <_printf_i+0x150>
 80050aa:	680b      	ldr	r3, [r1, #0]
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	600a      	str	r2, [r1, #0]
 80050b0:	681e      	ldr	r6, [r3, #0]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7fb f912 	bl	80002e0 <memchr>
 80050bc:	b108      	cbz	r0, 80050c2 <_printf_i+0x1f2>
 80050be:	1b80      	subs	r0, r0, r6
 80050c0:	6060      	str	r0, [r4, #4]
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	2300      	movs	r3, #0
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	e7a8      	b.n	8005020 <_printf_i+0x150>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d0ab      	beq.n	8005034 <_printf_i+0x164>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	079b      	lsls	r3, r3, #30
 80050e0:	d413      	bmi.n	800510a <_printf_i+0x23a>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e7a4      	b.n	8005038 <_printf_i+0x168>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	47d0      	blx	sl
 80050f8:	3001      	adds	r0, #1
 80050fa:	d09b      	beq.n	8005034 <_printf_i+0x164>
 80050fc:	3501      	adds	r5, #1
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	9903      	ldr	r1, [sp, #12]
 8005102:	1a5b      	subs	r3, r3, r1
 8005104:	42ab      	cmp	r3, r5
 8005106:	dcf2      	bgt.n	80050ee <_printf_i+0x21e>
 8005108:	e7eb      	b.n	80050e2 <_printf_i+0x212>
 800510a:	2500      	movs	r5, #0
 800510c:	f104 0619 	add.w	r6, r4, #25
 8005110:	e7f5      	b.n	80050fe <_printf_i+0x22e>
 8005112:	bf00      	nop
 8005114:	080053e9 	.word	0x080053e9
 8005118:	080053fa 	.word	0x080053fa

0800511c <memmove>:
 800511c:	4288      	cmp	r0, r1
 800511e:	b510      	push	{r4, lr}
 8005120:	eb01 0402 	add.w	r4, r1, r2
 8005124:	d902      	bls.n	800512c <memmove+0x10>
 8005126:	4284      	cmp	r4, r0
 8005128:	4623      	mov	r3, r4
 800512a:	d807      	bhi.n	800513c <memmove+0x20>
 800512c:	1e43      	subs	r3, r0, #1
 800512e:	42a1      	cmp	r1, r4
 8005130:	d008      	beq.n	8005144 <memmove+0x28>
 8005132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800513a:	e7f8      	b.n	800512e <memmove+0x12>
 800513c:	4402      	add	r2, r0
 800513e:	4601      	mov	r1, r0
 8005140:	428a      	cmp	r2, r1
 8005142:	d100      	bne.n	8005146 <memmove+0x2a>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800514a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800514e:	e7f7      	b.n	8005140 <memmove+0x24>

08005150 <_free_r>:
 8005150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005152:	2900      	cmp	r1, #0
 8005154:	d048      	beq.n	80051e8 <_free_r+0x98>
 8005156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515a:	9001      	str	r0, [sp, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f1a1 0404 	sub.w	r4, r1, #4
 8005162:	bfb8      	it	lt
 8005164:	18e4      	addlt	r4, r4, r3
 8005166:	f000 f8d3 	bl	8005310 <__malloc_lock>
 800516a:	4a20      	ldr	r2, [pc, #128]	; (80051ec <_free_r+0x9c>)
 800516c:	9801      	ldr	r0, [sp, #4]
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	4615      	mov	r5, r2
 8005172:	b933      	cbnz	r3, 8005182 <_free_r+0x32>
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6014      	str	r4, [r2, #0]
 8005178:	b003      	add	sp, #12
 800517a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800517e:	f000 b8cd 	b.w	800531c <__malloc_unlock>
 8005182:	42a3      	cmp	r3, r4
 8005184:	d90b      	bls.n	800519e <_free_r+0x4e>
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	1862      	adds	r2, r4, r1
 800518a:	4293      	cmp	r3, r2
 800518c:	bf04      	itt	eq
 800518e:	681a      	ldreq	r2, [r3, #0]
 8005190:	685b      	ldreq	r3, [r3, #4]
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	bf04      	itt	eq
 8005196:	1852      	addeq	r2, r2, r1
 8005198:	6022      	streq	r2, [r4, #0]
 800519a:	602c      	str	r4, [r5, #0]
 800519c:	e7ec      	b.n	8005178 <_free_r+0x28>
 800519e:	461a      	mov	r2, r3
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	b10b      	cbz	r3, 80051a8 <_free_r+0x58>
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	d9fa      	bls.n	800519e <_free_r+0x4e>
 80051a8:	6811      	ldr	r1, [r2, #0]
 80051aa:	1855      	adds	r5, r2, r1
 80051ac:	42a5      	cmp	r5, r4
 80051ae:	d10b      	bne.n	80051c8 <_free_r+0x78>
 80051b0:	6824      	ldr	r4, [r4, #0]
 80051b2:	4421      	add	r1, r4
 80051b4:	1854      	adds	r4, r2, r1
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	6011      	str	r1, [r2, #0]
 80051ba:	d1dd      	bne.n	8005178 <_free_r+0x28>
 80051bc:	681c      	ldr	r4, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	6053      	str	r3, [r2, #4]
 80051c2:	4421      	add	r1, r4
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	e7d7      	b.n	8005178 <_free_r+0x28>
 80051c8:	d902      	bls.n	80051d0 <_free_r+0x80>
 80051ca:	230c      	movs	r3, #12
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	e7d3      	b.n	8005178 <_free_r+0x28>
 80051d0:	6825      	ldr	r5, [r4, #0]
 80051d2:	1961      	adds	r1, r4, r5
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf04      	itt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	bf04      	itt	eq
 80051e0:	1949      	addeq	r1, r1, r5
 80051e2:	6021      	streq	r1, [r4, #0]
 80051e4:	6054      	str	r4, [r2, #4]
 80051e6:	e7c7      	b.n	8005178 <_free_r+0x28>
 80051e8:	b003      	add	sp, #12
 80051ea:	bd30      	pop	{r4, r5, pc}
 80051ec:	2400009c 	.word	0x2400009c

080051f0 <_malloc_r>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	1ccd      	adds	r5, r1, #3
 80051f4:	f025 0503 	bic.w	r5, r5, #3
 80051f8:	3508      	adds	r5, #8
 80051fa:	2d0c      	cmp	r5, #12
 80051fc:	bf38      	it	cc
 80051fe:	250c      	movcc	r5, #12
 8005200:	2d00      	cmp	r5, #0
 8005202:	4606      	mov	r6, r0
 8005204:	db01      	blt.n	800520a <_malloc_r+0x1a>
 8005206:	42a9      	cmp	r1, r5
 8005208:	d903      	bls.n	8005212 <_malloc_r+0x22>
 800520a:	230c      	movs	r3, #12
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	2000      	movs	r0, #0
 8005210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005212:	f000 f87d 	bl	8005310 <__malloc_lock>
 8005216:	4921      	ldr	r1, [pc, #132]	; (800529c <_malloc_r+0xac>)
 8005218:	680a      	ldr	r2, [r1, #0]
 800521a:	4614      	mov	r4, r2
 800521c:	b99c      	cbnz	r4, 8005246 <_malloc_r+0x56>
 800521e:	4f20      	ldr	r7, [pc, #128]	; (80052a0 <_malloc_r+0xb0>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	b923      	cbnz	r3, 800522e <_malloc_r+0x3e>
 8005224:	4621      	mov	r1, r4
 8005226:	4630      	mov	r0, r6
 8005228:	f000 f862 	bl	80052f0 <_sbrk_r>
 800522c:	6038      	str	r0, [r7, #0]
 800522e:	4629      	mov	r1, r5
 8005230:	4630      	mov	r0, r6
 8005232:	f000 f85d 	bl	80052f0 <_sbrk_r>
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	d123      	bne.n	8005282 <_malloc_r+0x92>
 800523a:	230c      	movs	r3, #12
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	4630      	mov	r0, r6
 8005240:	f000 f86c 	bl	800531c <__malloc_unlock>
 8005244:	e7e3      	b.n	800520e <_malloc_r+0x1e>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	1b5b      	subs	r3, r3, r5
 800524a:	d417      	bmi.n	800527c <_malloc_r+0x8c>
 800524c:	2b0b      	cmp	r3, #11
 800524e:	d903      	bls.n	8005258 <_malloc_r+0x68>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	441c      	add	r4, r3
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	e004      	b.n	8005262 <_malloc_r+0x72>
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	42a2      	cmp	r2, r4
 800525c:	bf0c      	ite	eq
 800525e:	600b      	streq	r3, [r1, #0]
 8005260:	6053      	strne	r3, [r2, #4]
 8005262:	4630      	mov	r0, r6
 8005264:	f000 f85a 	bl	800531c <__malloc_unlock>
 8005268:	f104 000b 	add.w	r0, r4, #11
 800526c:	1d23      	adds	r3, r4, #4
 800526e:	f020 0007 	bic.w	r0, r0, #7
 8005272:	1ac2      	subs	r2, r0, r3
 8005274:	d0cc      	beq.n	8005210 <_malloc_r+0x20>
 8005276:	1a1b      	subs	r3, r3, r0
 8005278:	50a3      	str	r3, [r4, r2]
 800527a:	e7c9      	b.n	8005210 <_malloc_r+0x20>
 800527c:	4622      	mov	r2, r4
 800527e:	6864      	ldr	r4, [r4, #4]
 8005280:	e7cc      	b.n	800521c <_malloc_r+0x2c>
 8005282:	1cc4      	adds	r4, r0, #3
 8005284:	f024 0403 	bic.w	r4, r4, #3
 8005288:	42a0      	cmp	r0, r4
 800528a:	d0e3      	beq.n	8005254 <_malloc_r+0x64>
 800528c:	1a21      	subs	r1, r4, r0
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f82e 	bl	80052f0 <_sbrk_r>
 8005294:	3001      	adds	r0, #1
 8005296:	d1dd      	bne.n	8005254 <_malloc_r+0x64>
 8005298:	e7cf      	b.n	800523a <_malloc_r+0x4a>
 800529a:	bf00      	nop
 800529c:	2400009c 	.word	0x2400009c
 80052a0:	240000a0 	.word	0x240000a0

080052a4 <_realloc_r>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	4607      	mov	r7, r0
 80052a8:	4614      	mov	r4, r2
 80052aa:	460e      	mov	r6, r1
 80052ac:	b921      	cbnz	r1, 80052b8 <_realloc_r+0x14>
 80052ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052b2:	4611      	mov	r1, r2
 80052b4:	f7ff bf9c 	b.w	80051f0 <_malloc_r>
 80052b8:	b922      	cbnz	r2, 80052c4 <_realloc_r+0x20>
 80052ba:	f7ff ff49 	bl	8005150 <_free_r>
 80052be:	4625      	mov	r5, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c4:	f000 f830 	bl	8005328 <_malloc_usable_size_r>
 80052c8:	42a0      	cmp	r0, r4
 80052ca:	d20f      	bcs.n	80052ec <_realloc_r+0x48>
 80052cc:	4621      	mov	r1, r4
 80052ce:	4638      	mov	r0, r7
 80052d0:	f7ff ff8e 	bl	80051f0 <_malloc_r>
 80052d4:	4605      	mov	r5, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d0f2      	beq.n	80052c0 <_realloc_r+0x1c>
 80052da:	4631      	mov	r1, r6
 80052dc:	4622      	mov	r2, r4
 80052de:	f7ff fbf7 	bl	8004ad0 <memcpy>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff ff33 	bl	8005150 <_free_r>
 80052ea:	e7e9      	b.n	80052c0 <_realloc_r+0x1c>
 80052ec:	4635      	mov	r5, r6
 80052ee:	e7e7      	b.n	80052c0 <_realloc_r+0x1c>

080052f0 <_sbrk_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	; (800530c <_sbrk_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fb fd38 	bl	8000d70 <_sbrk>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_sbrk_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_sbrk_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	240002b0 	.word	0x240002b0

08005310 <__malloc_lock>:
 8005310:	4801      	ldr	r0, [pc, #4]	; (8005318 <__malloc_lock+0x8>)
 8005312:	f000 b811 	b.w	8005338 <__retarget_lock_acquire_recursive>
 8005316:	bf00      	nop
 8005318:	240002b8 	.word	0x240002b8

0800531c <__malloc_unlock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_unlock+0x8>)
 800531e:	f000 b80c 	b.w	800533a <__retarget_lock_release_recursive>
 8005322:	bf00      	nop
 8005324:	240002b8 	.word	0x240002b8

08005328 <_malloc_usable_size_r>:
 8005328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800532c:	1f18      	subs	r0, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	bfbc      	itt	lt
 8005332:	580b      	ldrlt	r3, [r1, r0]
 8005334:	18c0      	addlt	r0, r0, r3
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_acquire_recursive>:
 8005338:	4770      	bx	lr

0800533a <__retarget_lock_release_recursive>:
 800533a:	4770      	bx	lr

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr


H7_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080047b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000128  24000010  080047c0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000138  080047c0  00020138  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000145aa  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020c4  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a50  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000998  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035722  00000000  00000000  00037a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b1df  00000000  00000000  0006d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158b3b  00000000  00000000  00078399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d0ed4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ae8  00000000  00000000  001d0f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004724 	.word	0x08004724

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004724 	.word	0x08004724

080002d8 <HAL_FDCAN_RxFifo0Callback>:


// RX PART

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d014      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f001 f8e2 	bl	80014bc <HAL_FDCAN_GetRxMessage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80002fe:	f000 fab9 	bl	8000874 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000302:	2200      	movs	r2, #0
 8000304:	2101      	movs	r1, #1
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f001 fa46 	bl	8001798 <HAL_FDCAN_ActivateNotification>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000312:	f000 faaf 	bl	8000874 <Error_Handler>
    }
  }
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	240000dc 	.word	0x240000dc
 8000324:	2400010c 	.word	0x2400010c

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fc15 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f85f 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f95b 	bl	80005f0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800033a:	f000 f8d9 	bl	80004f0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800033e:	4829      	ldr	r0, [pc, #164]	; (80003e4 <main+0xbc>)
 8000340:	f001 f836 	bl	80013b0 <HAL_FDCAN_Start>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <main+0x26>
  {
	  Error_Handler();
 800034a:	f000 fa93 	bl	8000874 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800034e:	2200      	movs	r2, #0
 8000350:	2101      	movs	r1, #1
 8000352:	4824      	ldr	r0, [pc, #144]	; (80003e4 <main+0xbc>)
 8000354:	f001 fa20 	bl	8001798 <HAL_FDCAN_ActivateNotification>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <main+0x3a>
  {
    /* Notification Error */
    Error_Handler();
 800035e:	f000 fa89 	bl	8000874 <Error_Handler>
  }

  TxHeader.Identifier = 0x11;
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <main+0xc0>)
 8000364:	2211      	movs	r2, #17
 8000366:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <main+0xc0>)
 800036a:	2200      	movs	r2, #0
 800036c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <main+0xc0>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <main+0xc0>)
 8000376:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800037a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <main+0xc0>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <main+0xc0>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <main+0xc0>)
 800038a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800038e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <main+0xc0>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <main+0xc0>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]

    /* USER CODE BEGIN 3 */

	  while (1)
	  {
	   for (int i=0; i<12; i++)
 800039c:	2300      	movs	r3, #0
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	e00d      	b.n	80003be <main+0x96>
	   {
	    TxData[i] = indx++;
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <main+0xc4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	4910      	ldr	r1, [pc, #64]	; (80003ec <main+0xc4>)
 80003aa:	600a      	str	r2, [r1, #0]
 80003ac:	b2d9      	uxtb	r1, r3
 80003ae:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <main+0xc8>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	460a      	mov	r2, r1
 80003b6:	701a      	strb	r2, [r3, #0]
	   for (int i=0; i<12; i++)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b0b      	cmp	r3, #11
 80003c2:	ddee      	ble.n	80003a2 <main+0x7a>
	   }

	   if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)!= HAL_OK)
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <main+0xc8>)
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <main+0xc0>)
 80003c8:	4806      	ldr	r0, [pc, #24]	; (80003e4 <main+0xbc>)
 80003ca:	f001 f81c 	bl	8001406 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <main+0xb0>
	   {
	    Error_Handler();
 80003d4:	f000 fa4e 	bl	8000874 <Error_Handler>
	   }

	   HAL_Delay (1000);
 80003d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003dc:	f000 fc50 	bl	8000c80 <HAL_Delay>
	   for (int i=0; i<12; i++)
 80003e0:	e7dc      	b.n	800039c <main+0x74>
 80003e2:	bf00      	nop
 80003e4:	24000030 	.word	0x24000030
 80003e8:	240000e8 	.word	0x240000e8
 80003ec:	2400002c 	.word	0x2400002c
 80003f0:	240000d0 	.word	0x240000d0

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b09c      	sub	sp, #112	; 0x70
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fe:	224c      	movs	r2, #76	; 0x4c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f004 f986 	bl	8004714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2220      	movs	r2, #32
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f004 f980 	bl	8004714 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000414:	2002      	movs	r0, #2
 8000416:	f002 f911 	bl	800263c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <SystemClock_Config+0xf4>)
 8000420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000422:	4a31      	ldr	r2, [pc, #196]	; (80004e8 <SystemClock_Config+0xf4>)
 8000424:	f023 0301 	bic.w	r3, r3, #1
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
 800042a:	4b2f      	ldr	r3, [pc, #188]	; (80004e8 <SystemClock_Config+0xf4>)
 800042c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <SystemClock_Config+0xf8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043c:	4a2b      	ldr	r2, [pc, #172]	; (80004ec <SystemClock_Config+0xf8>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <SystemClock_Config+0xf8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000450:	bf00      	nop
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <SystemClock_Config+0xf8>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800045a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800045e:	d1f8      	bne.n	8000452 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000460:	2302      	movs	r3, #2
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000464:	2301      	movs	r3, #1
 8000466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000468:	2340      	movs	r3, #64	; 0x40
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	2302      	movs	r3, #2
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	2300      	movs	r3, #0
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000474:	2304      	movs	r3, #4
 8000476:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000478:	2309      	movs	r3, #9
 800047a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047c:	2302      	movs	r3, #2
 800047e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000480:	2303      	movs	r3, #3
 8000482:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000484:	2302      	movs	r3, #2
 8000486:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000488:	230c      	movs	r3, #12
 800048a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800048c:	2302      	movs	r3, #2
 800048e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000494:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	4618      	mov	r0, r3
 800049c:	f002 f908 	bl	80026b0 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004a6:	f000 f9e5 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	233f      	movs	r3, #63	; 0x3f
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2101      	movs	r1, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f002 fd1a 	bl	8002f08 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004da:	f000 f9cb 	bl	8000874 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3770      	adds	r7, #112	; 0x70
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	58000400 	.word	0x58000400
 80004ec:	58024800 	.word	0x58024800

080004f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 80004f8:	4a3c      	ldr	r2, [pc, #240]	; (80005ec <MX_FDCAN1_Init+0xfc>)
 80004fa:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80004fc:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 80004fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000502:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000504:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000506:	2204      	movs	r2, #4
 8000508:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800050a:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800050c:	2201      	movs	r2, #1
 800050e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000510:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000512:	2200      	movs	r2, #0
 8000514:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000518:	2200      	movs	r2, #0
 800051a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800051c:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000524:	220d      	movs	r2, #13
 8000526:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8000528:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800052a:	2256      	movs	r2, #86	; 0x56
 800052c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000530:	220d      	movs	r2, #13
 8000532:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000536:	2219      	movs	r2, #25
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800053c:	2201      	movs	r2, #1
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000542:	2202      	movs	r2, #2
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000548:	2201      	movs	r2, #1
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000554:	2201      	movs	r2, #1
 8000556:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800055a:	2200      	movs	r2, #0
 800055c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000560:	2201      	movs	r2, #1
 8000562:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000566:	2205      	movs	r2, #5
 8000568:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800056c:	2200      	movs	r2, #0
 800056e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000572:	2204      	movs	r2, #4
 8000574:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000578:	2200      	movs	r2, #0
 800057a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800057e:	2204      	movs	r2, #4
 8000580:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000584:	2200      	movs	r2, #0
 8000586:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800058a:	2200      	movs	r2, #0
 800058c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000590:	2201      	movs	r2, #1
 8000592:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 8000596:	2200      	movs	r2, #0
 8000598:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 800059c:	2205      	movs	r2, #5
 800059e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 80005a2:	f000 fcad 	bl	8000f00 <HAL_FDCAN_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80005ac:	f000 f962 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005bc:	2301      	movs	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 80005c0:	2311      	movs	r3, #17
 80005c2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 80005c4:	2311      	movs	r3, #17
 80005c6:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_FDCAN1_Init+0xf8>)
 80005d2:	f000 fe77 	bl	80012c4 <HAL_FDCAN_ConfigFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_FDCAN1_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 80005dc:	f000 f94a 	bl	8000874 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	24000030 	.word	0x24000030
 80005ec:	4000a000 	.word	0x4000a000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b94      	ldr	r3, [pc, #592]	; (8000858 <MX_GPIO_Init+0x268>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	4a92      	ldr	r2, [pc, #584]	; (8000858 <MX_GPIO_Init+0x268>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000616:	4b90      	ldr	r3, [pc, #576]	; (8000858 <MX_GPIO_Init+0x268>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000624:	4b8c      	ldr	r3, [pc, #560]	; (8000858 <MX_GPIO_Init+0x268>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	4a8b      	ldr	r2, [pc, #556]	; (8000858 <MX_GPIO_Init+0x268>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000634:	4b88      	ldr	r3, [pc, #544]	; (8000858 <MX_GPIO_Init+0x268>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b85      	ldr	r3, [pc, #532]	; (8000858 <MX_GPIO_Init+0x268>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	4a83      	ldr	r2, [pc, #524]	; (8000858 <MX_GPIO_Init+0x268>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000652:	4b81      	ldr	r3, [pc, #516]	; (8000858 <MX_GPIO_Init+0x268>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b7d      	ldr	r3, [pc, #500]	; (8000858 <MX_GPIO_Init+0x268>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	4a7c      	ldr	r2, [pc, #496]	; (8000858 <MX_GPIO_Init+0x268>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000670:	4b79      	ldr	r3, [pc, #484]	; (8000858 <MX_GPIO_Init+0x268>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <MX_GPIO_Init+0x268>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	4a74      	ldr	r2, [pc, #464]	; (8000858 <MX_GPIO_Init+0x268>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <MX_GPIO_Init+0x268>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069c:	4b6e      	ldr	r3, [pc, #440]	; (8000858 <MX_GPIO_Init+0x268>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a2:	4a6d      	ldr	r2, [pc, #436]	; (8000858 <MX_GPIO_Init+0x268>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ac:	4b6a      	ldr	r3, [pc, #424]	; (8000858 <MX_GPIO_Init+0x268>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	4b67      	ldr	r3, [pc, #412]	; (8000858 <MX_GPIO_Init+0x268>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a65      	ldr	r2, [pc, #404]	; (8000858 <MX_GPIO_Init+0x268>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b63      	ldr	r3, [pc, #396]	; (8000858 <MX_GPIO_Init+0x268>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0310 	and.w	r3, r3, #16
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f244 0101 	movw	r1, #16385	; 0x4001
 80006de:	485f      	ldr	r0, [pc, #380]	; (800085c <MX_GPIO_Init+0x26c>)
 80006e0:	f001 ff92 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ea:	485d      	ldr	r0, [pc, #372]	; (8000860 <MX_GPIO_Init+0x270>)
 80006ec:	f001 ff8c 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	485b      	ldr	r0, [pc, #364]	; (8000864 <MX_GPIO_Init+0x274>)
 80006f6:	f001 ff87 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4856      	ldr	r0, [pc, #344]	; (8000868 <MX_GPIO_Init+0x278>)
 8000710:	f001 fdca 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000714:	2332      	movs	r3, #50	; 0x32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000724:	230b      	movs	r3, #11
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	484e      	ldr	r0, [pc, #312]	; (8000868 <MX_GPIO_Init+0x278>)
 8000730:	f001 fdba 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000734:	2386      	movs	r3, #134	; 0x86
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000744:	230b      	movs	r3, #11
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4847      	ldr	r0, [pc, #284]	; (800086c <MX_GPIO_Init+0x27c>)
 8000750:	f001 fdaa 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000754:	f244 0301 	movw	r3, #16385	; 0x4001
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	483b      	ldr	r0, [pc, #236]	; (800085c <MX_GPIO_Init+0x26c>)
 800076e:	f001 fd9b 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000784:	230b      	movs	r3, #11
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4833      	ldr	r0, [pc, #204]	; (800085c <MX_GPIO_Init+0x26c>)
 8000790:	f001 fd8a 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000794:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007a6:	2307      	movs	r3, #7
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <MX_GPIO_Init+0x270>)
 80007b2:	f001 fd79 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4824      	ldr	r0, [pc, #144]	; (8000860 <MX_GPIO_Init+0x270>)
 80007d0:	f001 fd6a 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_GPIO_Init+0x280>)
 80007ea:	f001 fd5d 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000800:	230a      	movs	r3, #10
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_GPIO_Init+0x27c>)
 800080c:	f001 fd4c 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000810:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000822:	230b      	movs	r3, #11
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <MX_GPIO_Init+0x280>)
 800082e:	f001 fd3b 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_GPIO_Init+0x274>)
 800084a:	f001 fd2d 	bl	80022a8 <HAL_GPIO_Init>

}
 800084e:	bf00      	nop
 8000850:	3730      	adds	r7, #48	; 0x30
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	58024400 	.word	0x58024400
 800085c:	58020400 	.word	0x58020400
 8000860:	58020c00 	.word	0x58020c00
 8000864:	58021000 	.word	0x58021000
 8000868:	58020800 	.word	0x58020800
 800086c:	58020000 	.word	0x58020000
 8000870:	58021800 	.word	0x58021800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_MspInit+0x30>)
 8000888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x30>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x30>)
 8000898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	58024400 	.word	0x58024400

080008b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0b8      	sub	sp, #224	; 0xe0
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	22bc      	movs	r2, #188	; 0xbc
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 ff1d 	bl	8004714 <memset>
  if(hfdcan->Instance==FDCAN1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a29      	ldr	r2, [pc, #164]	; (8000984 <HAL_FDCAN_MspInit+0xd0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d14a      	bne.n	800097a <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80008ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fe37 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000900:	f7ff ffb8 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 8000906:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 8000916:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800091a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_FDCAN_MspInit+0xd4>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000940:	2303      	movs	r3, #3
 8000942:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000958:	2309      	movs	r3, #9
 800095a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000962:	4619      	mov	r1, r3
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <HAL_FDCAN_MspInit+0xd8>)
 8000966:	f001 fc9f 	bl	80022a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2013      	movs	r0, #19
 8000970:	f000 fa91 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000974:	2013      	movs	r0, #19
 8000976:	f000 faa8 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	37e0      	adds	r7, #224	; 0xe0
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	4000a000 	.word	0x4000a000
 8000988:	58024400 	.word	0x58024400
 800098c:	58020c00 	.word	0x58020c00

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f930 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80009ea:	f000 ff4f 	bl	800188c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000030 	.word	0x24000030

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <SystemInit+0xe4>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <SystemInit+0xe4>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <SystemInit+0xe8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d807      	bhi.n	8000a28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <SystemInit+0xe8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f023 030f 	bic.w	r3, r3, #15
 8000a20:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <SystemInit+0xe8>)
 8000a22:	f043 0307 	orr.w	r3, r3, #7
 8000a26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <SystemInit+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <SystemInit+0xec>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SystemInit+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <SystemInit+0xec>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4929      	ldr	r1, [pc, #164]	; (8000ae4 <SystemInit+0xec>)
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemInit+0xf0>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemInit+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemInit+0xe8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 030f 	bic.w	r3, r3, #15
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemInit+0xe8>)
 8000a5c:	f043 0307 	orr.w	r3, r3, #7
 8000a60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemInit+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <SystemInit+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <SystemInit+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <SystemInit+0xec>)
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <SystemInit+0xf4>)
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <SystemInit+0xec>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <SystemInit+0xf8>)
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <SystemInit+0xec>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <SystemInit+0xfc>)
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <SystemInit+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <SystemInit+0xec>)
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <SystemInit+0xfc>)
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <SystemInit+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SystemInit+0xec>)
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <SystemInit+0xfc>)
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <SystemInit+0xec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SystemInit+0xec>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <SystemInit+0xec>)
 8000aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <SystemInit+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <SystemInit+0x100>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <SystemInit+0x104>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ac2:	d202      	bcs.n	8000aca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <SystemInit+0x108>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SystemInit+0x10c>)
 8000acc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ad0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	52002000 	.word	0x52002000
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aec:	02020200 	.word	0x02020200
 8000af0:	01ff0000 	.word	0x01ff0000
 8000af4:	01010280 	.word	0x01010280
 8000af8:	5c001000 	.word	0x5c001000
 8000afc:	ffff0000 	.word	0xffff0000
 8000b00:	51008108 	.word	0x51008108
 8000b04:	52004000 	.word	0x52004000

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff ff74 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fdbb 	bl	80046b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fbf5 	bl	8000328 <main>
  bx  lr
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b48:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b4c:	080047b0 	.word	0x080047b0
  ldr r2, =_sbss
 8000b50:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b54:	24000138 	.word	0x24000138

08000b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC3_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f98c 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b68:	f002 fb84 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_Init+0x68>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	4913      	ldr	r1, [pc, #76]	; (8000bc8 <HAL_Init+0x6c>)
 8000b7a:	5ccb      	ldrb	r3, [r1, r3]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
 8000b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_Init+0x68>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_Init+0x6c>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_Init+0x70>)
 8000b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_Init+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f814 	bl	8000bd4 <HAL_InitTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e002      	b.n	8000bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb6:	f7ff fe63 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	08004788 	.word	0x08004788
 8000bcc:	24000004 	.word	0x24000004
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_InitTick+0x60>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e021      	b.n	8000c2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_InitTick+0x64>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f971 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 f93b 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_InitTick+0x68>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2400000c 	.word	0x2400000c
 8000c38:	24000000 	.word	0x24000000
 8000c3c:	24000008 	.word	0x24000008

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2400000c 	.word	0x2400000c
 8000c64:	24000134 	.word	0x24000134

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	24000134 	.word	0x24000134

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2400000c 	.word	0x2400000c

08000cc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetREVID+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0c1b      	lsrs	r3, r3, #16
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	5c001000 	.word	0x5c001000

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	05fa0000 	.word	0x05fa0000

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff29 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff40 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff33 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa4 	bl	8000e3c <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b098      	sub	sp, #96	; 0x60
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000f08:	4a84      	ldr	r2, [pc, #528]	; (800111c <HAL_FDCAN_Init+0x21c>)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4611      	mov	r1, r2
 8000f10:	224c      	movs	r2, #76	; 0x4c
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fbf0 	bl	80046f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e1ca      	b.n	80012b8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7e      	ldr	r2, [pc, #504]	; (8001120 <HAL_FDCAN_Init+0x220>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fcb0 	bl	80008b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0210 	bic.w	r2, r2, #16
 8000f62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f64:	f7ff fe80 	bl	8000c68 <HAL_GetTick>
 8000f68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f6a:	e014      	b.n	8000f96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f6c:	f7ff fe7c 	bl	8000c68 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	d90d      	bls.n	8000f96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e190      	b.n	80012b8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d0e3      	beq.n	8000f6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699a      	ldr	r2, [r3, #24]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff fe58 	bl	8000c68 <HAL_GetTick>
 8000fb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fba:	e014      	b.n	8000fe6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fbc:	f7ff fe54 	bl	8000c68 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d90d      	bls.n	8000fe6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e168      	b.n	80012b8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0e3      	beq.n	8000fbc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0202 	orr.w	r2, r2, #2
 8001002:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7c1b      	ldrb	r3, [r3, #16]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800101a:	619a      	str	r2, [r3, #24]
 800101c:	e007      	b.n	800102e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	699a      	ldr	r2, [r3, #24]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800102c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7c5b      	ldrb	r3, [r3, #17]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d108      	bne.n	8001048 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	e007      	b.n	8001058 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	699a      	ldr	r2, [r3, #24]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001056:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c9b      	ldrb	r3, [r3, #18]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d108      	bne.n	8001072 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	e007      	b.n	8001082 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001080:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80010a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0210 	bic.w	r2, r2, #16
 80010b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0204 	orr.w	r2, r2, #4
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	e030      	b.n	8001134 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d02c      	beq.n	8001134 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d020      	beq.n	8001124 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0210 	orr.w	r2, r2, #16
 8001100:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d114      	bne.n	8001134 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	619a      	str	r2, [r3, #24]
 800111a:	e00b      	b.n	8001134 <HAL_FDCAN_Init+0x234>
 800111c:	0800473c 	.word	0x0800473c
 8001120:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0220 	orr.w	r2, r2, #32
 8001132:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	3b01      	subs	r3, #1
 800113a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	3b01      	subs	r3, #1
 8001142:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001144:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800114c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	3b01      	subs	r3, #1
 8001156:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800115c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800115e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001168:	d115      	bne.n	8001196 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	3b01      	subs	r3, #1
 8001176:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001178:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	3b01      	subs	r3, #1
 8001180:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001182:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	3b01      	subs	r3, #1
 800118c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001192:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001194:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011bc:	4413      	add	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d012      	beq.n	80011e8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80011ca:	f023 0107 	bic.w	r1, r3, #7
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011d8:	4413      	add	r3, r2
 80011da:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d012      	beq.n	8001216 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011f8:	f023 0107 	bic.w	r1, r3, #7
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001206:	4413      	add	r3, r2
 8001208:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121a:	2b00      	cmp	r3, #0
 800121c:	d013      	beq.n	8001246 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001226:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001234:	4413      	add	r3, r2
 8001236:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800123a:	011a      	lsls	r2, r3, #4
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124a:	2b00      	cmp	r3, #0
 800124c:	d013      	beq.n	8001276 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001256:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001264:	4413      	add	r3, r2
 8001266:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800126a:	021a      	lsls	r2, r3, #8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_FDCAN_Init+0x3c0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d107      	bne.n	8001290 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f022 0203 	bic.w	r2, r2, #3
 800128e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fdf9 	bl	8001ea0 <FDCAN_CalcultateRamBlockAddresses>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80012b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3760      	adds	r7, #96	; 0x60
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	4000a000 	.word	0x4000a000

080012c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012d4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <HAL_FDCAN_ConfigFilter+0x1e>
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d157      	bne.n	8001392 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d12b      	bne.n	8001342 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d10d      	bne.n	800130e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80012fe:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001304:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001306:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00e      	b.n	800132c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800131a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001322:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e025      	b.n	800138e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	075a      	lsls	r2, r3, #29
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b07      	cmp	r3, #7
 8001356:	d103      	bne.n	8001360 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	e006      	b.n	800136e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	079a      	lsls	r2, r3, #30
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3304      	adds	r3, #4
 8001386:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e008      	b.n	80013a4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d111      	bne.n	80013e8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e008      	b.n	80013fa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ee:	f043 0204 	orr.w	r2, r3, #4
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
  }
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d141      	bne.n	80014a2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001426:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e038      	b.n	80014b4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001458:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e026      	b.n	80014b4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 fe95 	bl	80021ac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e008      	b.n	80014b4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014a8:	f043 0208 	orr.w	r2, r3, #8
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	; 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014d4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80014d6:	7efb      	ldrb	r3, [r7, #27]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	f040 814b 	bne.w	8001774 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b40      	cmp	r3, #64	; 0x40
 80014e2:	d14d      	bne.n	8001580 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014fa:	f043 0220 	orr.w	r2, r3, #32
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e13e      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800151e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e12c      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001534:	0e1b      	lsrs	r3, r3, #24
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d10b      	bne.n	8001556 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001546:	0fdb      	lsrs	r3, r3, #31
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001550:	d101      	bne.n	8001556 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	69f9      	ldr	r1, [r7, #28]
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	e069      	b.n	8001654 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b41      	cmp	r3, #65	; 0x41
 8001584:	d14d      	bne.n	8001622 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800158e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800159c:	f043 0220 	orr.w	r2, r3, #32
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0ed      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0db      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015d6:	0e1b      	lsrs	r3, r3, #24
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10b      	bne.n	80015f8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015e8:	0fdb      	lsrs	r3, r3, #31
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015f2:	d101      	bne.n	80015f8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	69f9      	ldr	r1, [r7, #28]
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	e018      	b.n	8001654 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d309      	bcc.n	8001640 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001632:	f043 0220 	orr.w	r2, r3, #32
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0a2      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e005      	b.n	8001684 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3304      	adds	r3, #4
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0e1b      	lsrs	r3, r3, #24
 80016d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0fda      	lsrs	r2, r3, #31
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3304      	adds	r3, #4
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
 80016f6:	e00a      	b.n	800170e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	441a      	add	r2, r3
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	440b      	add	r3, r1
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	3301      	adds	r3, #1
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	461a      	mov	r2, r3
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	4293      	cmp	r3, r2
 800171e:	d3eb      	bcc.n	80016f8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b40      	cmp	r3, #64	; 0x40
 8001724:	d105      	bne.n	8001732 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001730:	e01e      	b.n	8001770 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b41      	cmp	r3, #65	; 0x41
 8001736:	d105      	bne.n	8001744 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001742:	e015      	b.n	8001770 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b1f      	cmp	r3, #31
 8001748:	d808      	bhi.n	800175c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2101      	movs	r1, #1
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800175a:	e009      	b.n	8001770 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 021f 	and.w	r2, r3, #31
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e008      	b.n	8001786 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800177a:	f043 0208 	orr.w	r2, r3, #8
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	372c      	adds	r7, #44	; 0x2c
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	08004798 	.word	0x08004798

08001798 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017aa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <HAL_FDCAN_ActivateNotification+0x20>
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d155      	bne.n	8001864 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d108      	bne.n	80017d8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017d6:	e014      	b.n	8001802 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	4013      	ands	r3, r2
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d108      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0202 	orr.w	r2, r2, #2
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017f8:	e003      	b.n	8001802 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2203      	movs	r2, #3
 8001800:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	430a      	orrs	r2, r1
 800181c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	430a      	orrs	r2, r1
 800183a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_FDCAN_ActivateNotification+0xec>)
 8001848:	4013      	ands	r3, r2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	430b      	orrs	r3, r1
 8001850:	6553      	str	r3, [r2, #84]	; 0x54
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0f9b      	lsrs	r3, r3, #30
 800185a:	490b      	ldr	r1, [pc, #44]	; (8001888 <HAL_FDCAN_ActivateNotification+0xf0>)
 800185c:	4313      	orrs	r3, r2
 800185e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e008      	b.n	8001876 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800186a:	f043 0202 	orr.w	r2, r3, #2
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	3fcfffff 	.word	0x3fcfffff
 8001888:	4000a800 	.word	0x4000a800

0800188c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b092      	sub	sp, #72	; 0x48
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001894:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	079b      	lsls	r3, r3, #30
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800189c:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	079b      	lsls	r3, r3, #30
 80018a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018a4:	4013      	ands	r3, r2
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018bc:	4013      	ands	r3, r2
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018d4:	4013      	ands	r3, r2
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ec:	4013      	ands	r3, r2
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001904:	4013      	ands	r3, r2
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191c:	4013      	ands	r3, r2
 800191e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d011      	beq.n	8001952 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00a      	beq.n	8001952 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001944:	651a      	str	r2, [r3, #80]	; 0x50
 8001946:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa5a 	bl	8001e06 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01e      	beq.n	800199e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	4013      	ands	r3, r2
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198e:	651a      	str	r2, [r3, #80]	; 0x50
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fa0b 	bl	8001db4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800199e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_FDCAN_IRQHandler+0x250>)
 80019ac:	400b      	ands	r3, r1
 80019ae:	6513      	str	r3, [r2, #80]	; 0x50
 80019b0:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	0f9b      	lsrs	r3, r3, #30
 80019b6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80019b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f9c4 	bl	8001d48 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_FDCAN_IRQHandler+0x250>)
 80019ce:	400b      	ands	r3, r1
 80019d0:	6513      	str	r3, [r2, #80]	; 0x50
 80019d2:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 80019d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d6:	0f9b      	lsrs	r3, r3, #30
 80019d8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9be 	bl	8001d5e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00d      	beq.n	8001a04 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_FDCAN_IRQHandler+0x250>)
 80019f0:	400b      	ands	r3, r1
 80019f2:	6513      	str	r3, [r2, #80]	; 0x50
 80019f4:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 80019f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f8:	0f9b      	lsrs	r3, r3, #30
 80019fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fc6a 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <HAL_FDCAN_IRQHandler+0x250>)
 8001a12:	400b      	ands	r3, r1
 8001a14:	6513      	str	r3, [r2, #80]	; 0x50
 8001a16:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	0f9b      	lsrs	r3, r3, #30
 8001a1c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9a7 	bl	8001d74 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d011      	beq.n	8001a58 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f999 	bl	8001d8a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d01e      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a88:	4013      	ands	r3, r2
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	651a      	str	r2, [r3, #80]	; 0x50
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f97d 	bl	8001d9e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00f      	beq.n	8001ae0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aca:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f97a 	bl	8001dca <HAL_FDCAN_RxBufferNewMessageCallback>
 8001ad6:	e003      	b.n	8001ae0 <HAL_FDCAN_IRQHandler+0x254>
 8001ad8:	4000a800 	.word	0x4000a800
 8001adc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d011      	beq.n	8001b12 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b04:	651a      	str	r2, [r3, #80]	; 0x50
 8001b06:	4b8d      	ldr	r3, [pc, #564]	; (8001d3c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f966 	bl	8001dde <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d011      	beq.n	8001b44 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b36:	651a      	str	r2, [r3, #80]	; 0x50
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f957 	bl	8001df2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00f      	beq.n	8001b80 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b68:	651a      	str	r2, [r3, #80]	; 0x50
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b8e:	400b      	ands	r3, r1
 8001b90:	6513      	str	r3, [r2, #80]	; 0x50
 8001b92:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	0f9b      	lsrs	r3, r3, #30
 8001b98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f946 	bl	8001e2e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d011      	beq.n	8001bcc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bae:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	6513      	str	r3, [r2, #80]	; 0x50
 8001bb4:	4a61      	ldr	r2, [pc, #388]	; (8001d3c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb8:	0f9b      	lsrs	r3, r3, #30
 8001bba:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a5c      	ldr	r2, [pc, #368]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	f040 80a6 	bne.w	8001d24 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 809e 	beq.w	8001d24 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c0a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	6a3a      	ldr	r2, [r7, #32]
 8001c14:	4013      	ands	r3, r2
 8001c16:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c22:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001c3a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001c52:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8e7 	bl	8001e44 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8e7 	bl	8001e5a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01b      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbe:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8cf 	bl	8001e70 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ce0:	69f9      	ldr	r1, [r7, #28]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8d0 	bl	8001e88 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f873 	bl	8001e1a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3748      	adds	r7, #72	; 0x48
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	4000a800 	.word	0x4000a800
 8001d40:	3fcfffff 	.word	0x3fcfffff
 8001d44:	4000a000 	.word	0x4000a000

08001d48 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001eb6:	4ba7      	ldr	r3, [pc, #668]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	0091      	lsls	r1, r2, #2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	041a      	lsls	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4413      	add	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ef6:	4b97      	ldr	r3, [pc, #604]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	0091      	lsls	r1, r2, #2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001f38:	4b86      	ldr	r3, [pc, #536]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	0091      	lsls	r1, r2, #2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4413      	add	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f80:	4b74      	ldr	r3, [pc, #464]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	0091      	lsls	r1, r2, #2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f9a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001fc8:	4b62      	ldr	r3, [pc, #392]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	0091      	lsls	r1, r2, #2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	0091      	lsls	r1, r2, #2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800200e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4413      	add	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002038:	4013      	ands	r3, r2
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	0091      	lsls	r1, r2, #2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	430b      	orrs	r3, r1
 8002044:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002050:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800206c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	061a      	lsls	r2, r3, #24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002086:	4413      	add	r3, r2
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d915      	bls.n	800217c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002150:	e006      	b.n	8002160 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002152:	bf00      	nop
 8002154:	ffff0003 	.word	0xffff0003
 8002158:	10002b00 	.word	0x10002b00
 800215c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e010      	b.n	800219e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e005      	b.n	8002190 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3f3      	bcc.n	8002184 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80021ca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e00a      	b.n	80021ee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80021e0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80021e6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021ec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80021f8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80021fe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002204:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	3304      	adds	r3, #4
 800222e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	3304      	adds	r3, #4
 800223a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e020      	b.n	8002284 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3303      	adds	r3, #3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3302      	adds	r3, #2
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	440b      	add	r3, r1
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800225a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	440b      	add	r3, r1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002268:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	440a      	add	r2, r1
 8002270:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002272:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3304      	adds	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3304      	adds	r3, #4
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <FDCAN_CopyMessageToRAM+0xf8>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	461a      	mov	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4293      	cmp	r3, r2
 8002294:	d3d5      	bcc.n	8002242 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	3724      	adds	r7, #36	; 0x24
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	08004798 	.word	0x08004798

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_GPIO_Init+0x234>)
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ba:	e194      	b.n	80025e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8186 	beq.w	80025e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x44>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80e0 	beq.w	80025e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x238>)
 8002422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002426:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <HAL_GPIO_Init+0x238>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <HAL_GPIO_Init+0x238>)
 8002432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_GPIO_Init+0x23c>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_GPIO_Init+0x240>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d052      	beq.n	8002510 <HAL_GPIO_Init+0x268>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <HAL_GPIO_Init+0x244>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d031      	beq.n	80024d6 <HAL_GPIO_Init+0x22e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_GPIO_Init+0x248>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x22a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_GPIO_Init+0x24c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x226>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_GPIO_Init+0x250>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x222>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <HAL_GPIO_Init+0x254>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_GPIO_Init+0x258>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x21a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_GPIO_Init+0x25c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x216>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_GPIO_Init+0x260>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x212>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_GPIO_Init+0x264>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20e>
 80024b2:	2309      	movs	r3, #9
 80024b4:	e02d      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024b6:	230a      	movs	r3, #10
 80024b8:	e02b      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ba:	2308      	movs	r3, #8
 80024bc:	e029      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e027      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e025      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024c6:	2305      	movs	r3, #5
 80024c8:	e023      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e021      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e01f      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e01d      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e01b      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024da:	bf00      	nop
 80024dc:	58000080 	.word	0x58000080
 80024e0:	58024400 	.word	0x58024400
 80024e4:	58000400 	.word	0x58000400
 80024e8:	58020000 	.word	0x58020000
 80024ec:	58020400 	.word	0x58020400
 80024f0:	58020800 	.word	0x58020800
 80024f4:	58020c00 	.word	0x58020c00
 80024f8:	58021000 	.word	0x58021000
 80024fc:	58021400 	.word	0x58021400
 8002500:	58021800 	.word	0x58021800
 8002504:	58021c00 	.word	0x58021c00
 8002508:	58022000 	.word	0x58022000
 800250c:	58022400 	.word	0x58022400
 8002510:	2300      	movs	r3, #0
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4093      	lsls	r3, r2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002522:	4938      	ldr	r1, [pc, #224]	; (8002604 <HAL_GPIO_Init+0x35c>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f ae63 	bne.w	80022bc <HAL_GPIO_Init+0x14>
  }
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	58000400 	.word	0x58000400

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_PWREx_ConfigSupply+0x70>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00a      	beq.n	8002666 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_PWREx_ConfigSupply+0x70>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e01f      	b.n	80026a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e01d      	b.n	80026a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_PWREx_ConfigSupply+0x70>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	490f      	ldr	r1, [pc, #60]	; (80026ac <HAL_PWREx_ConfigSupply+0x70>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002676:	f7fe faf7 	bl	8000c68 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267c:	e009      	b.n	8002692 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800267e:	f7fe faf3 	bl	8000c68 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268c:	d901      	bls.n	8002692 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_PWREx_ConfigSupply+0x70>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269e:	d1ee      	bne.n	800267e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	58024800 	.word	0x58024800

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f000 bc1c 	b.w	8002efc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8087 	beq.w	80027e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b9e      	ldr	r3, [pc, #632]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026dc:	4b9b      	ldr	r3, [pc, #620]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d007      	beq.n	80026f8 <HAL_RCC_OscConfig+0x48>
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	2b18      	cmp	r3, #24
 80026ec:	d110      	bne.n	8002710 <HAL_RCC_OscConfig+0x60>
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b94      	ldr	r3, [pc, #592]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d06c      	beq.n	80027de <HAL_RCC_OscConfig+0x12e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d168      	bne.n	80027de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e3f5      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x78>
 800271a:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a8b      	ldr	r2, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e02e      	b.n	8002786 <HAL_RCC_OscConfig+0xd6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x9a>
 8002730:	4b86      	ldr	r3, [pc, #536]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a85      	ldr	r2, [pc, #532]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b83      	ldr	r3, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a82      	ldr	r2, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e01d      	b.n	8002786 <HAL_RCC_OscConfig+0xd6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0xbe>
 8002754:	4b7d      	ldr	r3, [pc, #500]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7c      	ldr	r2, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800275a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b7a      	ldr	r3, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a79      	ldr	r2, [pc, #484]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0xd6>
 800276e:	4b77      	ldr	r3, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a76      	ldr	r2, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a73      	ldr	r2, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d013      	beq.n	80027b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fa6b 	bl	8000c68 <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002796:	f7fe fa67 	bl	8000c68 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e3a9      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0xe6>
 80027b4:	e014      	b.n	80027e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fa57 	bl	8000c68 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7fe fa53 	bl	8000c68 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e395      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d0:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x10e>
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80ca 	beq.w	8002982 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f8:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0x164>
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2b18      	cmp	r3, #24
 8002808:	d156      	bne.n	80028b8 <HAL_RCC_OscConfig+0x208>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d151      	bne.n	80028b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x17c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e367      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 0219 	bic.w	r2, r3, #25
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4944      	ldr	r1, [pc, #272]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800283e:	f7fe fa13 	bl	8000c68 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe fa0f 	bl	8000c68 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e351      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002858:	4b3c      	ldr	r3, [pc, #240]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	f7fe fa30 	bl	8000cc8 <HAL_GetREVID>
 8002868:	4603      	mov	r3, r0
 800286a:	f241 0203 	movw	r2, #4099	; 0x1003
 800286e:	4293      	cmp	r3, r2
 8002870:	d817      	bhi.n	80028a2 <HAL_RCC_OscConfig+0x1f2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d108      	bne.n	800288c <HAL_RCC_OscConfig+0x1dc>
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288a:	e07a      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	492c      	ldr	r1, [pc, #176]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	4926      	ldr	r1, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b6:	e064      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d047      	beq.n	8002950 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 0219 	bic.w	r2, r3, #25
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	491f      	ldr	r1, [pc, #124]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe f9c9 	bl	8000c68 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe f9c5 	bl	8000c68 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e307      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	f7fe f9e6 	bl	8000cc8 <HAL_GetREVID>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002902:	4293      	cmp	r3, r2
 8002904:	d817      	bhi.n	8002936 <HAL_RCC_OscConfig+0x286>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x270>
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002916:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6053      	str	r3, [r2, #4]
 800291e:	e030      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	031b      	lsls	r3, r3, #12
 800292e:	4907      	ldr	r1, [pc, #28]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	e025      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	4901      	ldr	r1, [pc, #4]	; (800294c <HAL_RCC_OscConfig+0x29c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	e01a      	b.n	8002982 <HAL_RCC_OscConfig+0x2d2>
 800294c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002950:	4b9e      	ldr	r3, [pc, #632]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a9d      	ldr	r2, [pc, #628]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe f984 	bl	8000c68 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe f980 	bl	8000c68 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e2c2      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002976:	4b95      	ldr	r3, [pc, #596]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a9 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002990:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002998:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d007      	beq.n	80029b6 <HAL_RCC_OscConfig+0x306>
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b18      	cmp	r3, #24
 80029aa:	d13a      	bne.n	8002a22 <HAL_RCC_OscConfig+0x372>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d135      	bne.n	8002a22 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029b6:	4b85      	ldr	r3, [pc, #532]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x31e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e296      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ce:	f7fe f97b 	bl	8000cc8 <HAL_GetREVID>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80029d8:	4293      	cmp	r3, r2
 80029da:	d817      	bhi.n	8002a0c <HAL_RCC_OscConfig+0x35c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d108      	bne.n	80029f6 <HAL_RCC_OscConfig+0x346>
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029ec:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 80029ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029f2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029f4:	e075      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029f6:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	4971      	ldr	r1, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0a:	e06a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	496c      	ldr	r1, [pc, #432]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a20:	e05f      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d042      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a2a:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe f917 	bl	8000c68 <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a3e:	f7fe f913 	bl	8000c68 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e255      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a5c:	f7fe f934 	bl	8000cc8 <HAL_GetREVID>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d817      	bhi.n	8002a9a <HAL_RCC_OscConfig+0x3ea>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d108      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3d4>
 8002a72:	4b56      	ldr	r3, [pc, #344]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a7a:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	e02e      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
 8002a84:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	069b      	lsls	r3, r3, #26
 8002a92:	494e      	ldr	r1, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
 8002a98:	e023      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	4948      	ldr	r1, [pc, #288]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60cb      	str	r3, [r1, #12]
 8002aae:	e018      	b.n	8002ae2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ab0:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a45      	ldr	r2, [pc, #276]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe f8d4 	bl	8000c68 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ac4:	f7fe f8d0 	bl	8000c68 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e212      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d036      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe f8b1 	bl	8000c68 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f8ad 	bl	8000c68 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1ef      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x45a>
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe f897 	bl	8000c68 <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe f893 	bl	8000c68 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1d5      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d039      	beq.n	8002bdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d019      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe f874 	bl	8000c68 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b84:	f7fe f870 	bl	8000c68 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1b2      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4d4>
 8002ba2:	e01b      	b.n	8002bdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_RCC_OscConfig+0x51c>)
 8002baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe f85a 	bl	8000c68 <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bb8:	f7fe f856 	bl	8000c68 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d904      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e198      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
 8002bca:	bf00      	nop
 8002bcc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd0:	4ba3      	ldr	r3, [pc, #652]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ed      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8081 	beq.w	8002cec <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bea:	4b9e      	ldr	r3, [pc, #632]	; (8002e64 <HAL_RCC_OscConfig+0x7b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a9d      	ldr	r2, [pc, #628]	; (8002e64 <HAL_RCC_OscConfig+0x7b4>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe f837 	bl	8000c68 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7fe f833 	bl	8000c68 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e175      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <HAL_RCC_OscConfig+0x7b4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x582>
 8002c24:	4b8e      	ldr	r3, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a8d      	ldr	r2, [pc, #564]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_OscConfig+0x5de>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5a4>
 8002c3a:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a88      	ldr	r2, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	4b86      	ldr	r3, [pc, #536]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a85      	ldr	r2, [pc, #532]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	e01c      	b.n	8002c8e <HAL_RCC_OscConfig+0x5de>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5c6>
 8002c5c:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a7f      	ldr	r2, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e00b      	b.n	8002c8e <HAL_RCC_OscConfig+0x5de>
 8002c76:	4b7a      	ldr	r3, [pc, #488]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a79      	ldr	r2, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fd ffe7 	bl	8000c68 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fd ffe3 	bl	8000c68 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e123      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ee      	beq.n	8002c9e <HAL_RCC_OscConfig+0x5ee>
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fd ffd1 	bl	8000c68 <HAL_GetTick>
 8002cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fd ffcd 	bl	8000c68 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e10d      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce0:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ee      	bne.n	8002cca <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8102 	beq.w	8002efa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfe:	2b18      	cmp	r3, #24
 8002d00:	f000 80bd 	beq.w	8002e7e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f040 8095 	bne.w	8002e38 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fd ffa5 	bl	8000c68 <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fd ffa1 	bl	8000c68 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0e3      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d40:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCC_OscConfig+0x7b8>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	430a      	orrs	r2, r1
 8002d54:	4942      	ldr	r1, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	628b      	str	r3, [r1, #40]	; 0x28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	025b      	lsls	r3, r3, #9
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	3b01      	subs	r3, #1
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	3b01      	subs	r3, #1
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d8a:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <HAL_RCC_OscConfig+0x7bc>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002da8:	00d2      	lsls	r2, r2, #3
 8002daa:	492d      	ldr	r1, [pc, #180]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f023 020c 	bic.w	r2, r3, #12
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4928      	ldr	r1, [pc, #160]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	f023 0202 	bic.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4924      	ldr	r1, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fd ff2a 	bl	8000c68 <HAL_GetTick>
 8002e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fd ff26 	bl	8000c68 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e068      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x768>
 8002e36:	e060      	b.n	8002efa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_RCC_OscConfig+0x7b0>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fd ff10 	bl	8000c68 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4a:	e011      	b.n	8002e70 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fd ff0c 	bl	8000c68 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d90a      	bls.n	8002e70 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04e      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
 8002e5e:	bf00      	nop
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58024800 	.word	0x58024800
 8002e68:	fffffc0c 	.word	0xfffffc0c
 8002e6c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x854>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e7      	bne.n	8002e4c <HAL_RCC_OscConfig+0x79c>
 8002e7c:	e03d      	b.n	8002efa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e7e:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x854>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCC_OscConfig+0x854>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d031      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d12a      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d122      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d11a      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0a5b      	lsrs	r3, r3, #9
 8002ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d111      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d108      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	0e1b      	lsrs	r3, r3, #24
 8002ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	58024400 	.word	0x58024400

08002f08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e19c      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b8a      	ldr	r3, [pc, #552]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b87      	ldr	r3, [pc, #540]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 020f 	bic.w	r2, r3, #15
 8002f32:	4985      	ldr	r1, [pc, #532]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b83      	ldr	r3, [pc, #524]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e184      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d908      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f68:	4b78      	ldr	r3, [pc, #480]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4975      	ldr	r1, [pc, #468]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	4b70      	ldr	r3, [pc, #448]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d908      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	496a      	ldr	r1, [pc, #424]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d908      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	495e      	ldr	r1, [pc, #376]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d908      	bls.n	8003004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4953      	ldr	r1, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003000:	4313      	orrs	r3, r2
 8003002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b4d      	ldr	r3, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	429a      	cmp	r2, r3
 800301e:	d908      	bls.n	8003032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f023 020f 	bic.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4947      	ldr	r1, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 800302e:	4313      	orrs	r3, r2
 8003030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d055      	beq.n	80030ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800303e:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4940      	ldr	r1, [pc, #256]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d121      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0f6      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d115      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0ea      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0de      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0d6      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f023 0207 	bic.w	r2, r3, #7
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4925      	ldr	r1, [pc, #148]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fd fdd5 	bl	8000c68 <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fd fdd1 	bl	8000c68 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0be      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d1eb      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f023 020f 	bic.w	r2, r3, #15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d214      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4906      	ldr	r1, [pc, #24]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_RCC_ClockConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e086      	b.n	8003256 <HAL_RCC_ClockConfig+0x34e>
 8003148:	52002000 	.word	0x52002000
 800314c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003168:	429a      	cmp	r2, r3
 800316a:	d208      	bcs.n	800317e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800316c:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	4939      	ldr	r1, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 800317a:	4313      	orrs	r3, r2
 800317c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	4b34      	ldr	r3, [pc, #208]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003196:	429a      	cmp	r2, r3
 8003198:	d208      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	492e      	ldr	r1, [pc, #184]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d208      	bcs.n	80031da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d208      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4917      	ldr	r1, [pc, #92]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 8003204:	4313      	orrs	r3, r2
 8003206:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003208:	f000 f834 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	4912      	ldr	r1, [pc, #72]	; (8003264 <HAL_RCC_ClockConfig+0x35c>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
 8003224:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x358>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_ClockConfig+0x35c>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x360>)
 800323e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003240:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x364>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x368>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fcc2 	bl	8000bd4 <HAL_InitTick>
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	58024400 	.word	0x58024400
 8003264:	08004788 	.word	0x08004788
 8003268:	24000004 	.word	0x24000004
 800326c:	24000000 	.word	0x24000000
 8003270:	24000008 	.word	0x24000008

08003274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327a:	4bb3      	ldr	r3, [pc, #716]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003282:	2b18      	cmp	r3, #24
 8003284:	f200 8155 	bhi.w	8003532 <HAL_RCC_GetSysClockFreq+0x2be>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032f5 	.word	0x080032f5
 8003294:	08003533 	.word	0x08003533
 8003298:	08003533 	.word	0x08003533
 800329c:	08003533 	.word	0x08003533
 80032a0:	08003533 	.word	0x08003533
 80032a4:	08003533 	.word	0x08003533
 80032a8:	08003533 	.word	0x08003533
 80032ac:	08003533 	.word	0x08003533
 80032b0:	0800331b 	.word	0x0800331b
 80032b4:	08003533 	.word	0x08003533
 80032b8:	08003533 	.word	0x08003533
 80032bc:	08003533 	.word	0x08003533
 80032c0:	08003533 	.word	0x08003533
 80032c4:	08003533 	.word	0x08003533
 80032c8:	08003533 	.word	0x08003533
 80032cc:	08003533 	.word	0x08003533
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003533 	.word	0x08003533
 80032d8:	08003533 	.word	0x08003533
 80032dc:	08003533 	.word	0x08003533
 80032e0:	08003533 	.word	0x08003533
 80032e4:	08003533 	.word	0x08003533
 80032e8:	08003533 	.word	0x08003533
 80032ec:	08003533 	.word	0x08003533
 80032f0:	08003327 	.word	0x08003327
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003300:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	4a90      	ldr	r2, [pc, #576]	; (800354c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003312:	e111      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003314:	4b8d      	ldr	r3, [pc, #564]	; (800354c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003316:	61bb      	str	r3, [r7, #24]
    break;
 8003318:	e10e      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800331a:	4b8d      	ldr	r3, [pc, #564]	; (8003550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800331c:	61bb      	str	r3, [r7, #24]
    break;
 800331e:	e10b      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003320:	4b8c      	ldr	r3, [pc, #560]	; (8003554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003322:	61bb      	str	r3, [r7, #24]
    break;
 8003324:	e108      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003330:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800333c:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003346:	4b80      	ldr	r3, [pc, #512]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	08db      	lsrs	r3, r3, #3
 800334c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80e1 	beq.w	800352c <HAL_RCC_GetSysClockFreq+0x2b8>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	f000 8083 	beq.w	8003478 <HAL_RCC_GetSysClockFreq+0x204>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	f200 80a1 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x248>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x114>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d056      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003386:	e099      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02d      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	4a6b      	ldr	r2, [pc, #428]	; (800354c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033ee:	e087      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800355c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003412:	ed97 6a02 	vldr	s12, [r7, #8]
 8003416:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003432:	e065      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003560 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a02 	vldr	s12, [r7, #8]
 800345a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003476:	e043      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003564 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a02 	vldr	s12, [r7, #8]
 800349e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ba:	e021      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003560 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350a:	3301      	adds	r3, #1
 800350c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003518:	edd7 6a07 	vldr	s13, [r7, #28]
 800351c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003524:	ee17 3a90 	vmov	r3, s15
 8003528:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800352a:	e005      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    break;
 8003530:	e002      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003534:	61bb      	str	r3, [r7, #24]
    break;
 8003536:	bf00      	nop
  }

  return sysclockfreq;
 8003538:	69bb      	ldr	r3, [r7, #24]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	58024400 	.word	0x58024400
 800354c:	03d09000 	.word	0x03d09000
 8003550:	003d0900 	.word	0x003d0900
 8003554:	007a1200 	.word	0x007a1200
 8003558:	46000000 	.word	0x46000000
 800355c:	4c742400 	.word	0x4c742400
 8003560:	4a742400 	.word	0x4a742400
 8003564:	4af42400 	.word	0x4af42400

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003570:	2300      	movs	r3, #0
 8003572:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003574:	2300      	movs	r3, #0
 8003576:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03f      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003588:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358c:	d02a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800358e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003592:	d824      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003598:	d018      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800359a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359e:	d81e      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a8:	d007      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035aa:	e018      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ac:	4bab      	ldr	r3, [pc, #684]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4aaa      	ldr	r2, [pc, #680]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035b8:	e015      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff11 	bl	80043e8 <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035ca:	e00c      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 ffba 	bl	800454c <RCCEx_PLL3_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
      break;
 80035e2:	e000      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035ec:	4b9b      	ldr	r3, [pc, #620]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f8:	4998      	ldr	r1, [pc, #608]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	650b      	str	r3, [r1, #80]	; 0x50
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	2b04      	cmp	r3, #4
 8003616:	d826      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003635 	.word	0x08003635
 8003624:	08003643 	.word	0x08003643
 8003628:	08003655 	.word	0x08003655
 800362c:	0800366d 	.word	0x0800366d
 8003630:	0800366d 	.word	0x0800366d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b89      	ldr	r3, [pc, #548]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4a88      	ldr	r2, [pc, #544]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003640:	e015      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fecd 	bl	80043e8 <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003652:	e00c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3324      	adds	r3, #36	; 0x24
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 ff76 	bl	800454c <RCCEx_PLL3_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003664:	e003      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
      break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800366c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003674:	4b79      	ldr	r3, [pc, #484]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	4976      	ldr	r1, [pc, #472]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	650b      	str	r3, [r1, #80]	; 0x50
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	d042      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	d02b      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a6:	d825      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036a8:	2bc0      	cmp	r3, #192	; 0xc0
 80036aa:	d028      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036ac:	2bc0      	cmp	r3, #192	; 0xc0
 80036ae:	d821      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d016      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d81d      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d007      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036c0:	e018      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4b66      	ldr	r3, [pc, #408]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a65      	ldr	r2, [pc, #404]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036ce:	e017      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fe86 	bl	80043e8 <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036e0:	e00e      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3324      	adds	r3, #36	; 0x24
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 ff2f 	bl	800454c <RCCEx_PLL3_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036f2:	e005      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
      break;
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80036fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003706:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	4952      	ldr	r1, [pc, #328]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	650b      	str	r3, [r1, #80]	; 0x50
 8003718:	e001      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d049      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003734:	d030      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800373a:	d82a      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800373c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003740:	d02c      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003742:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003746:	d824      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374c:	d018      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800374e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003752:	d81e      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375c:	d007      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800375e:	e018      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800376c:	e017      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fe37 	bl	80043e8 <RCCEx_PLL2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800377e:	e00e      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3324      	adds	r3, #36	; 0x24
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fee0 	bl	800454c <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003790:	e005      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      break;
 8003796:	e002      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800379c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037b2:	492a      	ldr	r1, [pc, #168]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	658b      	str	r3, [r1, #88]	; 0x58
 80037b8:	e001      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04c      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d4:	d030      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037da:	d82a      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80037dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037e0:	d02c      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80037e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037e6:	d824      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80037e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ec:	d018      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80037ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037f2:	d81e      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80037f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037fc:	d007      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80037fe:	e018      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800380c:	e017      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fde7 	bl	80043e8 <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800381e:	e00e      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3324      	adds	r3, #36	; 0x24
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fe90 	bl	800454c <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003830:	e005      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
      break;
 8003836:	e002      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800383c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003852:	4902      	ldr	r1, [pc, #8]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	658b      	str	r3, [r1, #88]	; 0x58
 8003858:	e004      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800385a:	bf00      	nop
 800385c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d032      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	2b30      	cmp	r3, #48	; 0x30
 8003876:	d01c      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003878:	2b30      	cmp	r3, #48	; 0x30
 800387a:	d817      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 800387c:	2b20      	cmp	r3, #32
 800387e:	d00c      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003880:	2b20      	cmp	r3, #32
 8003882:	d813      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003888:	2b10      	cmp	r3, #16
 800388a:	d10f      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4baf      	ldr	r3, [pc, #700]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4aae      	ldr	r2, [pc, #696]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003898:	e00e      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fda1 	bl	80043e8 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038aa:	e005      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038be:	4ba3      	ldr	r3, [pc, #652]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ca:	49a0      	ldr	r1, [pc, #640]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038d0:	e001      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d047      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d030      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80038ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f0:	d82a      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f6:	d02c      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80038f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038fc:	d824      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d018      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003908:	d81e      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d007      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003914:	e018      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003916:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	4a8c      	ldr	r2, [pc, #560]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003922:	e017      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fd5c 	bl	80043e8 <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003934:	e00e      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3324      	adds	r3, #36	; 0x24
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fe05 	bl	800454c <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      break;
 800394c:	e002      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	4979      	ldr	r1, [pc, #484]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	650b      	str	r3, [r1, #80]	; 0x50
 800396c:	e001      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d049      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003986:	d02e      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398c:	d828      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800398e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003992:	d02a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003998:	d822      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800399a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800399e:	d026      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x486>
 80039a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039a4:	d81c      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039aa:	d010      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x466>
 80039ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039b0:	d816      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01d      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d111      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fd10 	bl	80043e8 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039cc:	e012      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3324      	adds	r3, #36	; 0x24
 80039d2:	2101      	movs	r1, #1
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fdb9 	bl	800454c <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039de:	e009      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80039f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	4951      	ldr	r1, [pc, #324]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a0c:	e001      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d04b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a28:	d02e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a2e:	d828      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d02a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d822      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a40:	d026      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003a42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a46:	d81c      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a52:	d816      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01d      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a5c:	d111      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fcbf 	bl	80043e8 <RCCEx_PLL2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a6e:	e012      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd68 	bl	800454c <RCCEx_PLL3_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a80:	e009      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
      break;
 8003a86:	e006      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a88:	bf00      	nop
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003aaa:	4928      	ldr	r1, [pc, #160]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	658b      	str	r3, [r1, #88]	; 0x58
 8003ab0:	e001      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02f      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d00e      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d814      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ada:	d10f      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ae8:	e00c      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2101      	movs	r1, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fc79 	bl	80043e8 <RCCEx_PLL2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	650b      	str	r3, [r1, #80]	; 0x50
 8003b1c:	e001      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d033      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d81c      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b77 	.word	0x08003b77
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b5f 	.word	0x08003b5f
 8003b48:	08003b77 	.word	0x08003b77
 8003b4c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4bb8      	ldr	r3, [pc, #736]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4ab7      	ldr	r2, [pc, #732]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b5c:	e00c      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fc3f 	bl	80043e8 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b6e:	e003      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	75fb      	strb	r3, [r7, #23]
      break;
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b7e:	4bad      	ldr	r3, [pc, #692]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	49aa      	ldr	r1, [pc, #680]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b90:	e001      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8086 	beq.w	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba4:	4ba4      	ldr	r3, [pc, #656]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4aa3      	ldr	r2, [pc, #652]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd f85a 	bl	8000c68 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb6:	e009      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fd f856 	bl	8000c68 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d902      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	75fb      	strb	r3, [r7, #23]
        break;
 8003bca:	e005      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bcc:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ef      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d166      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bde:	4b95      	ldr	r3, [pc, #596]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be8:	4053      	eors	r3, r2
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf2:	4b90      	ldr	r3, [pc, #576]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bfc:	4b8d      	ldr	r3, [pc, #564]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a8c      	ldr	r2, [pc, #560]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c08:	4b8a      	ldr	r3, [pc, #552]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a89      	ldr	r2, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c14:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d115      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd f81f 	bl	8000c68 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2c:	e00b      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fd f81b 	bl	8000c68 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d902      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	75fb      	strb	r3, [r7, #23]
            break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ed      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d126      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c66:	d10d      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c68:	4b72      	ldr	r3, [pc, #456]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c76:	0919      	lsrs	r1, r3, #4
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	496d      	ldr	r1, [pc, #436]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	610b      	str	r3, [r1, #16]
 8003c82:	e005      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c84:	4b6b      	ldr	r3, [pc, #428]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	4a6a      	ldr	r2, [pc, #424]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c8e:	6113      	str	r3, [r2, #16]
 8003c90:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9e:	4965      	ldr	r1, [pc, #404]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	670b      	str	r3, [r1, #112]	; 0x70
 8003ca4:	e004      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	75bb      	strb	r3, [r7, #22]
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d07e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc0:	2b28      	cmp	r3, #40	; 0x28
 8003cc2:	d867      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d9b 	.word	0x08003d9b
 8003cd0:	08003d95 	.word	0x08003d95
 8003cd4:	08003d95 	.word	0x08003d95
 8003cd8:	08003d95 	.word	0x08003d95
 8003cdc:	08003d95 	.word	0x08003d95
 8003ce0:	08003d95 	.word	0x08003d95
 8003ce4:	08003d95 	.word	0x08003d95
 8003ce8:	08003d95 	.word	0x08003d95
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d95 	.word	0x08003d95
 8003cf4:	08003d95 	.word	0x08003d95
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003d95 	.word	0x08003d95
 8003d00:	08003d95 	.word	0x08003d95
 8003d04:	08003d95 	.word	0x08003d95
 8003d08:	08003d95 	.word	0x08003d95
 8003d0c:	08003d83 	.word	0x08003d83
 8003d10:	08003d95 	.word	0x08003d95
 8003d14:	08003d95 	.word	0x08003d95
 8003d18:	08003d95 	.word	0x08003d95
 8003d1c:	08003d95 	.word	0x08003d95
 8003d20:	08003d95 	.word	0x08003d95
 8003d24:	08003d95 	.word	0x08003d95
 8003d28:	08003d95 	.word	0x08003d95
 8003d2c:	08003d9b 	.word	0x08003d9b
 8003d30:	08003d95 	.word	0x08003d95
 8003d34:	08003d95 	.word	0x08003d95
 8003d38:	08003d95 	.word	0x08003d95
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d9b 	.word	0x08003d9b
 8003d50:	08003d95 	.word	0x08003d95
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d95 	.word	0x08003d95
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003d95 	.word	0x08003d95
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003d9b 	.word	0x08003d9b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb36 	bl	80043e8 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3324      	adds	r3, #36	; 0x24
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fbdf 	bl	800454c <RCCEx_PLL3_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	4921      	ldr	r1, [pc, #132]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	654b      	str	r3, [r1, #84]	; 0x54
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d820      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003ded 	.word	0x08003ded
 8003ddc:	08003dff 	.word	0x08003dff
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 faf8 	bl	80043e8 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3324      	adds	r3, #36	; 0x24
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fba1 	bl	800454c <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
      break;
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d110      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4902      	ldr	r1, [pc, #8]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e30:	e008      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	58024800 	.word	0x58024800
 8003e3c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d039      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d820      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003ea3 	.word	0x08003ea3
 8003e64:	08003e79 	.word	0x08003e79
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fab2 	bl	80043e8 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e88:	e00c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb5b 	bl	800454c <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eaa:	4bb7      	ldr	r3, [pc, #732]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	49b3      	ldr	r1, [pc, #716]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eda:	d02e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ee0:	d828      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d822      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef8:	d81c      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efe:	d010      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d816      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fa66 	bl	80043e8 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f20:	e012      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb0f 	bl	800454c <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f32:	e009      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4e:	4b8e      	ldr	r3, [pc, #568]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	498a      	ldr	r1, [pc, #552]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	654b      	str	r3, [r1, #84]	; 0x54
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d04b      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f7e:	d02e      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f84:	d828      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d02a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f90:	d822      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f96:	d026      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9c:	d81c      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d816      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01d      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa14 	bl	80043e8 <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fc4:	e012      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3324      	adds	r3, #36	; 0x24
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fabd 	bl	800454c <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fd6:	e009      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004000:	4961      	ldr	r1, [pc, #388]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004002:	4313      	orrs	r3, r2
 8004004:	658b      	str	r3, [r1, #88]	; 0x58
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d04b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800401e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004022:	d02e      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004024:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004028:	d828      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d02a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004034:	d822      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004036:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800403a:	d026      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800403c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004040:	d81c      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004046:	d010      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404c:	d816      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01d      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d111      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f9c2 	bl	80043e8 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004068:	e012      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fa6b 	bl	800454c <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800408e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004096:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a4:	4938      	ldr	r1, [pc, #224]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	658b      	str	r3, [r1, #88]	; 0x58
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d10a      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fa3c 	bl	800454c <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040de:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ec:	4926      	ldr	r1, [pc, #152]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3324      	adds	r3, #36	; 0x24
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fa1b 	bl	800454c <RCCEx_PLL3_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004130:	4313      	orrs	r3, r2
 8004132:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d036      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800414a:	d01f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004150:	d817      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d009      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800415c:	e011      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f93f 	bl	80043e8 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800416e:	e00e      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3324      	adds	r3, #36	; 0x24
 8004174:	2102      	movs	r1, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f9e8 	bl	800454c <RCCEx_PLL3_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004180:	e005      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
      break;
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004188:	58024400 	.word	0x58024400
      break;
 800418c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004194:	4b93      	ldr	r3, [pc, #588]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a2:	4990      	ldr	r1, [pc, #576]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	658b      	str	r3, [r1, #88]	; 0x58
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d033      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041c4:	d01c      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80041c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ca:	d816      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80041cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d0:	d003      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	d007      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041da:	4b82      	ldr	r3, [pc, #520]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4a81      	ldr	r2, [pc, #516]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041e6:	e00c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3324      	adds	r3, #36	; 0x24
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9ac 	bl	800454c <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004208:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	4973      	ldr	r1, [pc, #460]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	654b      	str	r3, [r1, #84]	; 0x54
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d029      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800423c:	e00f      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4b69      	ldr	r3, [pc, #420]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a68      	ldr	r2, [pc, #416]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800424a:	e00b      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f8c8 	bl	80043e8 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800426a:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	495b      	ldr	r1, [pc, #364]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800427c:	e001      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3324      	adds	r3, #36	; 0x24
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f959 	bl	800454c <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d030      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b8:	d017      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80042ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042be:	d811      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d013      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	d80b      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d4:	d106      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042e2:	e007      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
      break;
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004306:	4937      	ldr	r1, [pc, #220]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	654b      	str	r3, [r1, #84]	; 0x54
 800430c:	e001      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	492e      	ldr	r1, [pc, #184]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800434a:	4926      	ldr	r1, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800435c:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004368:	491e      	ldr	r1, [pc, #120]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004384:	6113      	str	r3, [r2, #16]
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004390:	4914      	ldr	r1, [pc, #80]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da08      	bge.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800439e:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	4906      	ldr	r1, [pc, #24]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043d0:	7dbb      	ldrb	r3, [r7, #22]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	58024400 	.word	0x58024400

080043e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d101      	bne.n	8004406 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e099      	b.n	800453a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800440c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fc fc29 	bl	8000c68 <HAL_GetTick>
 8004416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004418:	e008      	b.n	800442c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800441a:	f7fc fc25 	bl	8000c68 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e086      	b.n	800453a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	493f      	ldr	r1, [pc, #252]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	628b      	str	r3, [r1, #40]	; 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	3b01      	subs	r3, #1
 8004452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	3b01      	subs	r3, #1
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	b29b      	uxth	r3, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800447c:	4931      	ldr	r1, [pc, #196]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004482:	4b30      	ldr	r3, [pc, #192]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	492d      	ldr	r1, [pc, #180]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f023 0220 	bic.w	r2, r3, #32
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	4928      	ldr	r1, [pc, #160]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <RCCEx_PLL2_Config+0x160>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69d2      	ldr	r2, [r2, #28]
 80044be:	00d2      	lsls	r2, r2, #3
 80044c0:	4920      	ldr	r1, [pc, #128]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	f043 0310 	orr.w	r3, r3, #16
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e4:	e00f      	b.n	8004506 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f8:	e005      	b.n	8004506 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800450c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004512:	f7fc fba9 	bl	8000c68 <HAL_GetTick>
 8004516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004518:	e008      	b.n	800452c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800451a:	f7fc fba5 	bl	8000c68 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	ffff0007 	.word	0xffff0007

0800454c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800455a:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b03      	cmp	r3, #3
 8004564:	d101      	bne.n	800456a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e099      	b.n	800469e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800456a:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a4e      	ldr	r2, [pc, #312]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004576:	f7fc fb77 	bl	8000c68 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800457c:	e008      	b.n	8004590 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800457e:	f7fc fb73 	bl	8000c68 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e086      	b.n	800469e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	051b      	lsls	r3, r3, #20
 80045aa:	493f      	ldr	r1, [pc, #252]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	628b      	str	r3, [r1, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	3b01      	subs	r3, #1
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045e0:	4931      	ldr	r1, [pc, #196]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	492d      	ldr	r1, [pc, #180]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	4928      	ldr	r1, [pc, #160]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <RCCEx_PLL3_Config+0x160>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	69d2      	ldr	r2, [r2, #28]
 8004622:	00d2      	lsls	r2, r2, #3
 8004624:	4920      	ldr	r1, [pc, #128]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004648:	e00f      	b.n	800466a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800465c:	e005      	b.n	800466a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	4a11      	ldr	r2, [pc, #68]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fc faf7 	bl	8000c68 <HAL_GetTick>
 800467a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800467c:	e008      	b.n	8004690 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800467e:	f7fc faf3 	bl	8000c68 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e006      	b.n	800469e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	58024400 	.word	0x58024400
 80046ac:	ffff0007 	.word	0xffff0007

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4d0d      	ldr	r5, [pc, #52]	; (80046e8 <__libc_init_array+0x38>)
 80046b4:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	2600      	movs	r6, #0
 80046bc:	42a6      	cmp	r6, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	4d0b      	ldr	r5, [pc, #44]	; (80046f0 <__libc_init_array+0x40>)
 80046c2:	4c0c      	ldr	r4, [pc, #48]	; (80046f4 <__libc_init_array+0x44>)
 80046c4:	f000 f82e 	bl	8004724 <_init>
 80046c8:	1b64      	subs	r4, r4, r5
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	2600      	movs	r6, #0
 80046ce:	42a6      	cmp	r6, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d8:	4798      	blx	r3
 80046da:	3601      	adds	r6, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e2:	4798      	blx	r3
 80046e4:	3601      	adds	r6, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	080047a8 	.word	0x080047a8
 80046ec:	080047a8 	.word	0x080047a8
 80046f0:	080047a8 	.word	0x080047a8
 80046f4:	080047ac 	.word	0x080047ac

080046f8 <memcpy>:
 80046f8:	440a      	add	r2, r1
 80046fa:	4291      	cmp	r1, r2
 80046fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004700:	d100      	bne.n	8004704 <memcpy+0xc>
 8004702:	4770      	bx	lr
 8004704:	b510      	push	{r4, lr}
 8004706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800470a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800470e:	4291      	cmp	r1, r2
 8004710:	d1f9      	bne.n	8004706 <memcpy+0xe>
 8004712:	bd10      	pop	{r4, pc}

08004714 <memset>:
 8004714:	4402      	add	r2, r0
 8004716:	4603      	mov	r3, r0
 8004718:	4293      	cmp	r3, r2
 800471a:	d100      	bne.n	800471e <memset+0xa>
 800471c:	4770      	bx	lr
 800471e:	f803 1b01 	strb.w	r1, [r3], #1
 8004722:	e7f9      	b.n	8004718 <memset+0x4>

08004724 <_init>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr

08004730 <_fini>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr
